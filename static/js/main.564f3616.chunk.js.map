{"version":3,"sources":["Structures/Vertex.js","Structures/Edge.js","Structures/Lightpath.js","Structures/helpFunc.js","Components/Circles.js","Components/Ring.js","Components/lines.js","Components/Line.js","Components/Home.js","Router.js","Loading.js","App.js","index.js"],"names":["Vertex","edge1","edge2","neighbor_vertex1","neighbor_vertex2","index","passing_lightpaths","this","Edge","neighbor_edge1","neighbor_edge2","vertex1","vertex2","Lightpath","wavelength","startVertex","endVertex","passing_edges","rand","min","max","Math","floor","random","randN","array","resultLen","length","result","console","log","i","v","indexOf","push","sort","a","b","createLightpaths","optimalCirclesArr","vertexArr","edgeArr","lightpaths","circle","count","r","g","forEach","lightpath","v1","v2","vertex","start","target","current","edges_on_the_way","JSON","stringify","check_path","createLightpathsLine","optimalLinesArr","line","checkPathL","drawedje2","svg","cnt","radius","lineWidth","col","append","attr","PI","drawedje","drawcircles","arr","globalVertises","nodesWidth","className","d3","select","j","difference","cross","LPaths1","LPaths2","shuffle","x","drawVerteses","circles","LP","drawLP","LPindex","edge","checkCrossVerteses","f1","mainCircle","LParr","edgeCNT","circlesByLp","circlesByPassingEdges","appended","concat","countADMsOnline","onlineADMsnoDrawing","countADMs","edgeCounter","Ring","loadState","event","value","setState","showSimulateButton","placeholder","vertexCount","circlesCount","produceGraph","state","produceLightpathsOptimal","circlesArr","lightpathArr","lpOnlineCNT","optimalCirclesNum","parseInt","Array","unshift","calcAVG","showLpOnlineCNT","showAVGField","showOffline","showOnline","showAVG","stat","cRatioAVG","document","querySelector","onlineADMsinthisRun","offlineADMsinthisRun","cAVGworstCase","toFixed","showAVGcRatioField","cAVG","completeRun","counter","paths","querySelectorAll","removeAttribute","nodes","lpCNT","showOptimalSolution","attributes","display","showOnlineSolution","appear","simulate","showInputFields","reset","innerHTML","style","flexDirection","gap","id","type","borderRadius","onBlur","onChange","onClick","to","undefined","transform","Component","aadrawLPline","end","indexOfLevel","aadrawLPline2","optimalLines","levels","globalVerticies","svgclassName","svgHeight","lineLenght","lightPaths","indexInLp","drawVertesesForLines","level","appendLP","mainLine","levelsByPassingEdges","levelsByLP","levelIndex","partOfLP","drawLPS","appendLPAVG","Line","linesCount","levelsCNT","produceLightpaths","bind","optimalLinesNum","vertexArrLine","Home","alignSelf","Router","basename","path","component","exact","Loading","React","App","isLoading","setTimeout","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.564f3616.chunk.js","sourcesContent":["//A class for building the nodes in the graph\r\nexport default class Vertex {\r\n  constructor(edge1, edge2, neighbor_vertex1, neighbor_vertex2, index, passing_lightpaths) {\r\n    this.index = index;\r\n    this.neighbor_vertex1 = neighbor_vertex1;\r\n    this.neighbor_vertex2 = neighbor_vertex2;\r\n    this.edge1 = edge1;\r\n    this.edge2 = edge2;\r\n    this.passing_lightpaths = passing_lightpaths;\r\n  }\r\n\r\n}\r\n","//A class for building the Edge element\r\nexport default class Edge {\r\n  constructor(neighbor_edge1, neighbor_edge2, vertex1, vertex2, index, passing_lightpaths) {\r\n    this.index = index;\r\n    this.neighbor_edge1 = neighbor_edge1;\r\n    this.neighbor_edge2 = neighbor_edge2;\r\n    this.vertex1 = vertex1;\r\n    this.vertex2 = vertex2;\r\n    this.passing_lightpaths = passing_lightpaths;\r\n  }\r\n}\r\n","// A class for building the lighpath element in our network\r\nexport default class Lightpath {\r\n  constructor(wavelength, startVertex, endVertex, index, passing_edges) {\r\n    this.wavelength = wavelength;\r\n    this.passing_edges = passing_edges;\r\n    this.startVertex = startVertex;\r\n    this.endVertex = endVertex;\r\n    this.index = index;\r\n  }\r\n}","import Lightpath from \"./Lightpath\";\nimport Vertex from \"../Structures/Vertex\";\n\n//a function to return a random number between min and max\nconst rand = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n// a function that return a random number of elements inside an a given array\nconst randN = (array) => {\n  let resultLen = rand(1, array.length - 1);\n  let result = [];\n\n  console.log(array);\n\n  for (let i = 0; i < resultLen; i++) {\n    let v = array[rand(1, array.length - 1)];\n    if (result.indexOf(v) !== -1) {\n      i--;\n    } else {\n      result.push(v);\n    }\n  }\n  console.log(result);\n  return result.sort((a, b) => (a.index > b.index ? 1 : -1));\n};\n\n//a function that creates lightpaths on a given graph in Ring topology\nconst createLightpaths = (optimalCirclesArr, vertexArr, edgeArr) => {\n  let lightpaths = [];\n  for (let i = 0; i < optimalCirclesArr.length; i++) {\n    const circle = optimalCirclesArr[i];\n    for (let count = 0; count < circle.length - 1; count++) {\n      lightpaths.push(\n        new Lightpath(\n          { r: rand(0, 255), g: rand(0, 255), b: rand(0, 255) },\n          circle[count].index,\n          circle[count + 1].index,\n          lightpaths.length\n        )\n      );\n    }\n    lightpaths.push(\n      new Lightpath(\n        { r: rand(0, 255), g: rand(0, 255), b: rand(0, 255) },\n        circle[circle.length - 1].index,\n        circle[0].index,\n        lightpaths.length\n      )\n    );\n  }\n  lightpaths.forEach((lightpath) => {\n    lightpath.passing_edges = check_path(\n      lightpath.startVertex,\n      lightpath.endVertex,\n      vertexArr,\n      edgeArr\n    );\n  });\n  return lightpaths;\n};\n\n//a function that creates lightpaths on a given graph in line topology\nconst createLightpathsLine = (optimalLinesArr, vertexArr) => {\n  let lightpaths = [];\n  for (let i = 0; i < optimalLinesArr.length; i++) {\n    const line = optimalLinesArr[i];\n    for (let count = 0; count < line.length - 1; count++) {\n      lightpaths.push(\n        new Lightpath(\n          { r: rand(0, 255), g: rand(0, 255), b: rand(0, 255) },\n          line[count].index,\n          line[count + 1].index,\n          lightpaths.length\n        )\n      );\n    }\n  }\n  lightpaths.forEach((lightpath) => {\n    lightpath.passing_edges = checkPathL(\n      lightpath.startVertex,\n      lightpath.endVertex,\n      vertexArr\n    );\n  });\n  return lightpaths;\n};\n\n//a function that checks edges on the way of the lightpath in line topology \nconst checkPathL = (v1, v2, vertex) => {\n  let start = new Vertex();\n  let target = new Vertex();\n  let current = new Vertex();\n  let edges_on_the_way = [];\n  start = { ...vertex[v1] };\n  target = { ...vertex[v2] };\n  current = { ...start };\n\n  while (!(JSON.stringify(target) === JSON.stringify(current))) {\n    edges_on_the_way.push(current.edge2);\n    current = { ...vertex[current.neighbor_vertex2] };\n  }\n  return edges_on_the_way;\n};\n\n//a function that checks edges on the way of the lightpath in Ring topology \nfunction check_path(v1, v2, vertex) {\n  let start = new Vertex();\n  let target = new Vertex();\n  let current = new Vertex();\n  let edges_on_the_way = [];\n\n  start = { ...vertex[v1] };\n  target = { ...vertex[v2] };\n  current = { ...start };\n\n  while (!(JSON.stringify(target) === JSON.stringify(current))) {\n    edges_on_the_way.push(current.edge2);\n    current = { ...vertex[current.neighbor_vertex2] };\n  }\n\n  return edges_on_the_way;\n}\n\nexport { randN, rand, createLightpaths, createLightpathsLine };\n","import d3 from \"d3\";\n\nfunction drawedje2(\n  svg,\n  start,\n  cnt,\n  radius,\n  line,\n  lineWidth,\n  col = \"purple\",\n  index\n) {\n  svg\n    .append(\"svg:path\")\n    .attr(\n      \"d\",\n      `M50 ${start} a ${radius} ${radius} 0 0 1 0 ${\n        radius * 2\n      } a ${radius} ${radius} 0 0 1 0 ${radius * -2}`\n    )\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", col)\n    .attr(\"stroke-width\", `${lineWidth}`)\n    .attr(\n      \"stroke-dasharray\",\n      `0,${cnt},${line}, ${\n        2 * radius * Math.PI - cnt - line < 0.00001\n          ? 0\n          : 2 * radius * Math.PI - cnt - line\n      }`\n    )\n    .attr(\"display\", `none`)\n    .attr(\"class\", `p${index}`);\n}\n\nfunction drawedje(svg, start, cnt, radius, line, lineWidth, col = \"purple\") {\n  svg\n    .append(\"svg:path\")\n    .attr(\n      \"d\",\n      `M50 ${start} a ${radius} ${radius} 0 0 1 0 ${\n        radius * 2\n      } a ${radius} ${radius} 0 0 1 0 ${radius * -2}`\n    )\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", col)\n    .attr(\"stroke-width\", `${lineWidth}`)\n    .attr(\n      \"stroke-dasharray\",\n      `0,${cnt},${line}, ${2 * radius * Math.PI - cnt - line}`\n    );\n}\n\nfunction drawcircles(\n  arr,\n  globalVertises,\n  nodesWidth,\n  className = \".svgpainter\"\n) {\n  let svg = d3\n    .select(className)\n    .append(\"svg:svg\")\n    .attr(\"display\", `none`)\n    .attr(\"viewBox\", \"0 0 90 90\");\n  var length = arr.length;\n\n  for (let j = 0; j < length; j++) {\n    let cnt = 0;\n    let radius = 5 + j * 3;\n    var line = (2 * radius * Math.PI - globalVertises / 2) / globalVertises;\n    let start = 30 - j * 3;\n\n    for (let i = 0; i < arr[j].length; i++) {\n      line = (2 * radius * Math.PI - globalVertises / 2) / globalVertises;\n      let difference = arr[j][i].index;\n      if (i > 0) {\n        difference = arr[j][i].index - arr[j][i - 1].index;\n        line = line * difference + difference / 2 - 0.5;\n      } else {\n        if (difference === 0) line = 0;\n        else line = line * difference + difference / 2;\n      }\n      drawedje(svg, start, cnt, radius, line, 1, j === 0 ? \"black\" : \"purple\");\n      cnt += line;\n\n      drawedje(\n        svg,\n        start,\n        cnt,\n        radius,\n        0.5,\n        nodesWidth,\n        j === 0 && i !== 0 ? \"black\" : \"purple\"\n      );\n      cnt += 0.5;\n    }\n    line = (2 * radius * Math.PI - globalVertises / 2) / globalVertises;\n\n    drawedje(\n      svg,\n      start,\n      cnt,\n      radius,\n      2 * Math.PI * radius - cnt,\n      1,\n      j === 0 ? \"black\" : \"purple\"\n    );\n  }\n  return svg;\n}\n\nexport function getSVG(circlesArr, globalVertises) {\n  drawcircles(circlesArr, globalVertises, 3);\n}\n\nexport function cross(LPaths1, LPaths2) {\n  for (var i = 0; i < LPaths1.length; i++)\n    for (var j = 0; j < LPaths2.length; j++)\n      if (LPaths1[i] === LPaths2[j]) {\n        return true;\n      }\n  return false;\n}\n\nexport function shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\nexport function wait(ms) {\n  var start = Date.now(),\n    now = start;\n  while (now - start < ms) {\n    now = Date.now();\n  }\n}\n\nexport function f(mainCircle, LParr, globalVertises) {\n  let circles = [];\n  let svg = drawcircles(mainCircle, globalVertises, 3, \".svgpainter2\");\n\n  // get each light path one by one and put it in a circle\n  LParr.forEach((LP) => {\n    let appended = false;\n\n    // for each circle check if there is room for current light path\n    circles.forEach((circle, index) => {\n      if (appended) {\n        return;\n      }\n      let newCircle = false;\n      circle.forEach((LPinCircle) => {\n        if (newCircle) return;\n        if (cross(LP.passing_edges, LPinCircle.passing_edges)) newCircle = true;\n      });\n\n      if (newCircle) {\n        return;\n      }\n\n      circle.forEach((LPinCircle) => {\n        if (appended) {\n          return;\n        }\n\n        if (\n          cross(\n            [LPinCircle.startVertex, LPinCircle.endVertex],\n            [LP.startVertex, LP.endVertex]\n          )\n        ) {\n          appended = true;\n          circles[index].push(LP);\n\n          let start = 30 - (index + 1) * 3;\n          let radius = 5 + (index + 1) * 3;\n          let line = (2 * radius * Math.PI) / globalVertises;\n          LP.wavelength.r = LPinCircle.wavelength.r;\n          LP.wavelength.g = LPinCircle.wavelength.g;\n          LP.wavelength.b = LPinCircle.wavelength.b;\n\n          LP.passing_edges.forEach((edge) => {\n            drawedje(\n              svg,\n              start,\n              edge * line,\n              radius,\n              line,\n              3,\n              `rgb(${LPinCircle.wavelength.r},${LPinCircle.wavelength.g},${LPinCircle.wavelength.b})`\n            );\n          });\n\n          return;\n        }\n      });\n    });\n\n    if (!appended) {\n      circles.push([LP]);\n\n      let start = 30 - circles.length * 3;\n      let radius = 5 + circles.length * 3;\n      let line = (2 * radius * Math.PI) / globalVertises;\n      LP.passing_edges.forEach((edge) => {\n        //wait('2000')\n\n        drawedje(\n          svg,\n          start,\n          edge * line,\n          radius,\n          line,\n          3,\n          `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`\n        );\n      });\n    }\n  });\n  drawVerteses(circles, svg, globalVertises);\n}\n\nfunction drawVerteses(circles, svg, globalVertises) {\n  circles.forEach((circle, index) => {\n    circle.forEach((LP) => {\n      let start = 30 - (index + 1) * 3;\n      let radius = 5 + (index + 1) * 3;\n      let line = (2 * radius * Math.PI) / globalVertises;\n\n      drawedje2(\n        svg,\n        start,\n        LP.startVertex * line,\n        radius,\n        0.5,\n        3,\n        \"red\",\n        `${LP.index}999`\n      );\n      drawedje2(\n        svg,\n        start,\n        LP.endVertex * line,\n        radius,\n        0.5,\n        3,\n        \"red\",\n        `${LP.index}999`\n      );\n    });\n  });\n}\n\nfunction drawLP(LP, index, globalVertises, svg, LPindex) {\n  let start = 30 - index * 3;\n  let radius = 5 + index * 3;\n  let line = (2 * radius * Math.PI) / globalVertises;\n\n  LP.passing_edges.forEach((edge) => {\n    drawedje2(\n      svg,\n      start,\n      edge * line,\n      radius,\n      line,\n      3,\n      `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n      LPindex\n    );\n  });\n}\n\nexport function checkCrossVerteses(LP, circle) {\n  for (var i = 0; i < circle.length; i++) {\n    if (\n      cross(\n        [circle[i].startVertex, circle[i].endVertex],\n        [LP.startVertex, LP.endVertex]\n      )\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function f1(mainCircle, LParr, globalVertises, edgeCNT) {\n  let circlesByLp = [];\n  let circlesByPassingEdges = [];\n  let svg = drawcircles(mainCircle, globalVertises, 3, \".svgpainter3\");\n\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    circlesByPassingEdges.forEach((circle, index) => {\n      if (appended) {\n        return;\n      }\n      if (\n        !cross(LP.passing_edges, circle) &&\n        checkCrossVerteses(LP, circlesByLp[index])\n      ) {\n        circlesByPassingEdges[index] = circlesByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        circlesByLp[index].push(LP);\n\n        LP.wavelength.r = circlesByLp[index][0].wavelength.r;\n        LP.wavelength.g = circlesByLp[index][0].wavelength.g;\n        LP.wavelength.b = circlesByLp[index][0].wavelength.b;\n        drawLP(LP, index + 1, globalVertises, svg, LPindex);\n\n        appended = true;\n      }\n    });\n    if (!appended) {\n      circlesByPassingEdges.push(LP.passing_edges);\n      circlesByLp.push([LP]);\n      drawLP(LP, circlesByLp.length, globalVertises, svg, LPindex);\n    }\n  });\n  drawVerteses(circlesByLp, svg, globalVertises);\n  return countADMsOnline(circlesByLp, edgeCNT);\n}\n\nexport function onlineADMsnoDrawing(\n  mainCircle,\n  LParr,\n  globalVertises,\n  edgeCNT\n) {\n  let circlesByLp = [];\n  let circlesByPassingEdges = [];\n  let svg = drawcircles(mainCircle, globalVertises, 3, \".svgpainter3\");\n\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    circlesByPassingEdges.forEach((circle, index) => {\n      if (appended) {\n        return;\n      }\n      if (\n        !cross(LP.passing_edges, circle) &&\n        checkCrossVerteses(LP, circlesByLp[index])\n      ) {\n        circlesByPassingEdges[index] = circlesByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        circlesByLp[index].push(LP);\n\n        LP.wavelength.r = circlesByLp[index][0].wavelength.r;\n        LP.wavelength.g = circlesByLp[index][0].wavelength.g;\n        LP.wavelength.b = circlesByLp[index][0].wavelength.b;\n        // drawLP(LP, index + 1, globalVertises, svg, LPindex)\n\n        appended = true;\n      }\n    });\n    if (!appended) {\n      circlesByPassingEdges.push(LP.passing_edges);\n      circlesByLp.push([LP]);\n      // drawLP(LP, circlesByLp.length, globalVertises, svg, LPindex)\n    }\n  });\n  // drawVerteses(circlesByLp, svg, globalVertises)\n  return countADMsOnline(circlesByLp, edgeCNT);\n}\n\nconst countADMsOnline = (circlesByLp, edgeCNT) => {\n  let countADMs = 0;\n  circlesByLp.forEach((circle) => {\n    let edgeCounter = 0;\n    circle.forEach(\n      (lightpath) =>\n        (edgeCounter = lightpath.passing_edges.length + edgeCounter)\n    );\n    edgeCounter === edgeCNT\n      ? (countADMs = countADMs + circle.length)\n      : (countADMs = countADMs + circle.length + 1);\n  });\n  return countADMs;\n};\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Vertex from \"../Structures/Vertex\";\r\nimport Edge from \"../Structures/Edge\";\r\n\r\nimport { randN, createLightpaths } from \"../Structures/helpFunc.js\";\r\nimport { getSVG, f1, shuffle, onlineADMsnoDrawing } from \"./Circles\";\r\n\r\nimport \"../App.css\";\r\n\r\nexport default class Ring extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      vertexCount: 0,\r\n      circlesCount: 0,\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      lpOnlineCNT: 0,\r\n      showLpOnlineCNT: false,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n      cAVG: 0,\r\n    };\r\n  }\r\n\r\n  // a function to load the state with intial values\r\n  loadState = (event) => {\r\n    console.log(event.target.value);\r\n    if (event.target.value === 0) { this.setState({ showSimulateButton: false }) } else { this.setState({ showSimulateButton: true }) }\r\n    if (event.target.placeholder === 'Nodes') {\r\n      this.setState({ vertexCount: event.target.value });\r\n    } else if (event.target.placeholder === 'Circles') {\r\n      this.setState({ circlesCount: event.target.value });\r\n    }\r\n  };\r\n\r\n  // a function that creates the graph \r\n  produceGraph = () => {\r\n    const { vertexCount, vertexArr, edgeArr } = this.state;\r\n\r\n    for (let i = 0; i < vertexCount; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          vertexArr.push(\r\n            new Vertex(vertexCount - 1, i, vertexCount - 1, i + 1, i)\r\n          );\r\n          edgeArr.push(new Edge(vertexCount - 1, i, i, i + 1, i));\r\n          break;\r\n        case vertexCount - 1:\r\n          vertexArr.push(new Vertex(i - 1, vertexCount - 1, i - 1, 0, i));\r\n          edgeArr.push(new Edge(vertexCount - 1 - 1, 0, vertexCount - 1, 0, i));\r\n          break;\r\n        default:\r\n          vertexArr.push(new Vertex(i - 1, i, i - 1, i + 1, i));\r\n          edgeArr.push(new Edge(i - 1, i + 1, i, i + 1, i));\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n    // this function is responsible for creating the lightpaths (visual/ theoritical)\r\n  produceLightpathsOptimal = () => {\r\n    const {\r\n      circlesCount,\r\n      vertexArr,\r\n      edgeArr,\r\n      lightpathArr,\r\n      LParr,\r\n      lpOnlineCNT,\r\n    } = this.state;\r\n    const optimalCirclesNum = parseInt(circlesCount, 10);\r\n\r\n    let optimalCirclesArr = new Array(optimalCirclesNum);\r\n\r\n    for (let i = 0; i < optimalCirclesNum; i++) {\r\n      optimalCirclesArr[i] = randN(vertexArr);\r\n    }\r\n\r\n    lightpathArr.push(...createLightpaths(optimalCirclesArr, vertexArr));\r\n\r\n    optimalCirclesArr.unshift(vertexArr);\r\n\r\n    getSVG(optimalCirclesArr, vertexArr.length);\r\n    LParr.push(...shuffle(lightpathArr));\r\n    this.setState({\r\n      lpOnlineCNT:\r\n        lpOnlineCNT + f1([vertexArr], LParr, vertexArr.length, edgeArr.length),\r\n    });\r\n  };\r\n\r\n    // showing the average of the runs\r\n\r\n  calcAVG = () => {\r\n    this.setState({ \r\n       showLpOnlineCNT: false,\r\n       showAVGField: true, \r\n       showOffline: false, \r\n       showOnline: false, \r\n       showAVG: false, })\r\n  }\r\n\r\n  //calculating the statistics of the runs (worst/average)\r\n  stat = () => {\r\n    const {\r\n      vertexArr,\r\n      lightpathArr,\r\n      edgeArr\r\n    } = this.state;\r\n\r\n    let cRatioAVG = 0\r\n    let max = 0\r\n\r\n    for (let i = 0; i < document.querySelector('#AVG').value; i++) {\r\n      let onlineADMsinthisRun = onlineADMsnoDrawing([vertexArr], shuffle(lightpathArr), vertexArr.length, edgeArr.length)\r\n      let offlineADMsinthisRun = this.state.LParr.length\r\n\r\n      cRatioAVG = cRatioAVG + (onlineADMsinthisRun / offlineADMsinthisRun)\r\n      if ((onlineADMsinthisRun / offlineADMsinthisRun) > max) max = onlineADMsinthisRun / offlineADMsinthisRun;\r\n    }\r\n    this.setState({ cAVGworstCase: max.toFixed(2), showAVGcRatioField: true, cAVG: (cRatioAVG / document.querySelector('#AVG').value).toFixed(2) })\r\n\r\n\r\n  }\r\n\r\n  // a function to complete run the algorithm with stepping over the steps of the calculations \r\n  completeRun = () => {\r\n    const { LParr } = this.state;\r\n    let counter = 0;\r\n\r\n    while (counter < LParr.length) {\r\n\r\n      let paths = document.querySelectorAll(`.p${counter}`);\r\n\r\n      for (let j = 0; j < LParr[counter].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n      let nodes = document.querySelectorAll(`.p${counter}999`);\r\n\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        nodes[i].removeAttribute(\"display\");\r\n      }\r\n      counter = counter + 1;\r\n\r\n    }\r\n\r\n    this.setState({ lpCNT: this.state.lpCNT + counter });\r\n    this.setState({ showLpOnlineCNT: true });\r\n\r\n  }\r\n\r\n    //showing the optimal solution on the screen\r\n  showOptimalSolution = () => {\r\n\r\n    document.querySelector('.svgpainter').querySelector('svg').attributes.display.value === 'none' ? document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = '' : document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = 'none'\r\n\r\n  }\r\n\r\n   //showing the online solution on the screen\r\n  showOnlineSolution = () => {\r\n    document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value === 'none' ? document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value = '' : document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value = 'none'\r\n\r\n  }\r\n\r\n    //a function to step ove the minADM steps one by one\r\n  appear = () => {\r\n    console.log();\r\n    document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = ''\r\n    document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value = ''\r\n    // document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = ''\r\n    // document.querySelector('.svgpainter2').querySelector('svg').attributes.display.value = ''\r\n\r\n    const { LParr, lpCNT } = this.state;\r\n    let paths = document.querySelectorAll(`.p${lpCNT}`);\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (let j = 0; j < LParr[lpCNT].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n    }\r\n    paths = document.querySelectorAll(`.p${lpCNT}999`);\r\n\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (let i = 0; i < paths.length; i++) {\r\n        paths[i].removeAttribute(\"display\");\r\n      }\r\n    }\r\n    this.setState({ lpCNT: this.state.lpCNT + 1 });\r\n  };\r\n\r\n\r\n    //a function to run the simulation functions one by one\r\n  simulate = () => {\r\n\r\n    this.setState({ showOffline: true, showOnline: true, showSimulateButton: false, showInputFields: false, showAVG: true });\r\n    this.produceGraph();\r\n    this.produceLightpathsOptimal();\r\n\r\n  };\r\n\r\n    // a function to reset the state of the component\r\n  reset = () => {\r\n    if (this.state.showInputFields) {\r\n      document.querySelectorAll(\"input\")[0].value = \"\"\r\n      document.querySelectorAll(\"input\")[1].value = \"\"\r\n    }\r\n    document.querySelector(\".svgpainter\").innerHTML = \"\";\r\n    document.querySelector(\".svgpainter3\").innerHTML = \"\";\r\n\r\n    this.setState({\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      circlesCount: 0,\r\n      lpOnlineCNT: 0,\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      vertexCount: 0,\r\n      showLpOnlineCNT: false,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n      cAVG: 0,\r\n\r\n    });\r\n\r\n  };\r\n\r\n    //rendering the components on the screen\r\n  render() {\r\n    return (\r\n      <div className=\"container tc\">\r\n        <h1>Ring Toplogy Simulation</h1>\r\n\r\n        {this.state.showInputFields ? (<div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n          <div>\r\n            <p>Enter The Number Of Nodes</p>\r\n\r\n            <input\r\n              id=\"verteciesNum\"\r\n\r\n              type=\"text\"\r\n              placeholder=\"Nodes\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              onBlur={this.loadState}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n            />\r\n\r\n          </div>\r\n          <div>\r\n\r\n            <p>Enter The Number Of Circles</p>\r\n            <input\r\n              id=\"circlesNum\"\r\n              type=\"text\"\r\n              placeholder=\"Circles\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              onChange={this.loadState}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n            />\r\n          </div>\r\n        </div>) : null}\r\n        {this.state.showAVGField ? <div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n          <div>\r\n            <p>Enter Number Of Desired runs for Average Calcs</p>\r\n            <input\r\n              id=\"AVG\"\r\n              type=\"text\"\r\n              placeholder=\"Runs\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n\r\n            />\r\n            <button className=\"generalButton\" onClick={this.stat}>\r\n              Calc Average\r\n            </button>\r\n\r\n          </div>\r\n        </div> : null}\r\n        <div>\r\n          <Link to=\"/\" className=\"generalButton\">\r\n            {\" \"}\r\n            Go Home{\" \"}\r\n          </Link>\r\n          {!this.state.showSimulateButton ? null :\r\n            <button className=\"generalButton\" onClick={this.simulate}>\r\n              Simulate\r\n            </button>}\r\n\r\n          {!this.state.showOffline ? null :\r\n            <button className=\"generalButton\" onClick={this.appear}>\r\n              Step Over\r\n            </button>\r\n          }\r\n          {!this.state.showOnline ? null :\r\n            (<>\r\n              <button className=\"generalButton\" onClick={this.completeRun}>\r\n                Compelete Run\r\n              </button>\r\n              <button className=\"generalButton\" onClick={this.showOptimalSolution}>\r\n                Optimal Solution\r\n              </button>\r\n              <button className=\"generalButton\" onClick={this.showOnlineSolution}>\r\n                Online Solution\r\n              </button></>)\r\n          }\r\n          {this.state.showAVG ?\r\n            <button className=\"generalButton\" onClick={this.calcAVG}>\r\n              Average\r\n            </button> : null}\r\n          <button className=\"generalButton\" onClick={this.reset}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"tc\">\r\n          {this.state.showAVGcRatioField ? <div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n            <h3>\r\n\r\n              The Average C-Ratio for the desired number of runs is : {this.state.cAVG} <br />\r\n              The Worst Case C-Ratio for the desired number of runs is : {this.state.cAVGworstCase}\r\n            </h3>\r\n          </div> : null}\r\n          {this.state.showLpOnlineCNT ? (\r\n            <h3>\r\n              The C-Ratio in this Simulation is :{\" \"}\r\n              {(this.state.lpOnlineCNT / this.state.LParr.length).toFixed(2)}\r\n            </h3>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"container2\">\r\n          <div\r\n            className=\"tc \"\r\n            style={{ display: this.state.showOffline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              Optimal Solution <br /> Total ADMs: {this.state.LParr.length}\r\n            </h3>\r\n            <div className=\"tc svgpainter \"></div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"tc \"\r\n            style={{ display: this.state.showOnline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              OnLine minADM Solution <br />\r\n              Total ADMs:\r\n              {this.state.showLpOnlineCNT ? this.state.lpOnlineCNT : null}\r\n            </h3>\r\n            <h4>\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"Next Lightpath start is : \" +\r\n                  this.state.LParr[this.state.lpCNT].startVertex\r\n                  : null\r\n                : null}{\" \"}\r\n              <br />{\" \"}\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"end is : \" + this.state.LParr[this.state.lpCNT].endVertex\r\n                  : null\r\n                : null}\r\n            </h4>\r\n            <div\r\n              className=\"tc svgpainter3\"\r\n              style={{ transform: \"all 1s ease-in-out\" }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import d3 from \"d3\";\nimport { cross, checkCrossVerteses } from \"./Circles\";\n\nfunction aadrawLPline(svg, start, end, indexOfLevel, lineWidth, col) {\n  svg\n    .append(\"svg:line\")\n    .attr(\"x1\", `${start}`)\n    .attr(\"y1\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"x2\", `${end}`)\n    .attr(\"y2\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"stroke\", col)\n    .attr(\"stroke-width\", `${lineWidth}`);\n}\n\nfunction aadrawLPline2(svg, start, end, indexOfLevel, lineWidth, col, LPindex) {\n  svg\n    .append(\"svg:line\")\n    .attr(\"x1\", `${start}`)\n    .attr(\"y1\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"x2\", `${end}`)\n    .attr(\"y2\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"stroke\", col)\n    .attr(\"stroke-width\", `${lineWidth}`)\n    .attr(\"display\", `none`)\n    .attr(\"class\", `p${LPindex}`);\n}\n\nexport function optimalLines(\n  levels,\n  globalVerticies,\n  svgclassName = \".svgpainter\",\n  svgHeight = false\n) {\n  if (svgHeight === false) {\n    svgHeight = levels.length * 70 + 20;\n  }\n\n  let svg = d3\n    .select(svgclassName)\n    .append(\"svg:svg\")\n    .attr(\"height\", `${svgHeight}`)\n    .attr(\"display\", `none`)\n    .attr(\"width\", \"250\");\n\n  let lineLenght = 250 / globalVerticies;\n\n  levels.forEach((lightPaths, indexOfLevel) => {\n    for (var i = 0; i < lightPaths.length - 1; i++) {\n      var indexInLp = lightPaths[i].index;\n      aadrawLPline(\n        svg,\n        indexInLp * lineLenght,\n        lightPaths[i + 1].index * lineLenght,\n        indexOfLevel,\n        10,\n        indexOfLevel === 0 ? \"black\" : \"purple\"\n      );\n      aadrawLPline(\n        svg,\n        indexInLp * lineLenght,\n        indexInLp * lineLenght + 5,\n        indexOfLevel,\n        20,\n        indexOfLevel === 0 ? \"black\" : \"purple\"\n      );\n      aadrawLPline(\n        svg,\n        lightPaths[i + 1].index * lineLenght,\n        lightPaths[i + 1].index * lineLenght + 5,\n        indexOfLevel,\n        20,\n        indexOfLevel === 0 ? \"black\" : \"purple\"\n      );\n    }\n  });\n\n  return svg;\n}\n\nfunction drawVertesesForLines(levels, svg, globalVerticies) {\n  let lineLenght = 250 / globalVerticies;\n\n  levels.forEach((level, indexOfLevel) => {\n    level.forEach((LP, LPindex) => {\n      aadrawLPline2(\n        svg,\n        LP.passing_edges[0] * lineLenght,\n        LP.passing_edges[0] * lineLenght + 5,\n        indexOfLevel + 1,\n        20,\n        \"purple\",\n        `${LP.index}999`\n      );\n      aadrawLPline2(\n        svg,\n        (LP.passing_edges[LP.passing_edges.length - 1] + 1) * lineLenght,\n        (LP.passing_edges[LP.passing_edges.length - 1] + 1) * lineLenght + 5,\n        indexOfLevel + 1,\n        20,\n        \"purple\",\n        `${LP.index}999`\n      );\n    });\n    // let LP=level[level.length-1]\n    // let LPindex=level.length-1\n    // aadrawLPline2(svg,(LP.passing_edges[LP.passing_edges.length-1]+1)*lineLenght,((LP.passing_edges[LP.passing_edges.length-1]+1)*lineLenght)+5,+1,20,'purple',LPindex)\n  });\n}\n\nexport function onlineLines(mainLine, LParr, globalVerticies) {\n  let svg = optimalLines([mainLine], globalVerticies, \".svgpainter2\");\n\n  let lineLenght = 250 / globalVerticies;\n\n  let levelsByPassingEdges = [];\n  let levelsByLP = [];\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    levelsByPassingEdges.forEach((level, index) => {\n      if (appended) {\n        return;\n      }\n      if (\n        !cross(level, LP.passing_edges) &&\n        checkCrossVerteses(LP, levelsByLP[index])\n      ) {\n        levelsByPassingEdges[index] = levelsByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        levelsByLP[index].push(LP);\n\n        LP.wavelength.r = levelsByLP[index][0].wavelength.r;\n        LP.wavelength.g = levelsByLP[index][0].wavelength.g;\n        LP.wavelength.b = levelsByLP[index][0].wavelength.b;\n\n        LP.passing_edges.forEach((partOfLP) => {\n          aadrawLPline2(\n            svg,\n            partOfLP * lineLenght,\n            (partOfLP + 1) * lineLenght,\n            index + 1,\n            10,\n            `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n            LP.index\n          );\n        });\n\n        appended = true;\n      }\n    });\n\n    if (!appended) {\n      levelsByPassingEdges.push(LP.passing_edges);\n      levelsByLP.push([LP]);\n      LP.passing_edges.forEach((partOfLP) => {\n        aadrawLPline2(\n          svg,\n          partOfLP * lineLenght,\n          (partOfLP + 1) * lineLenght,\n          levelsByLP.length,\n          10,\n          `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n          LP.index\n        );\n      });\n    }\n  });\n\n  drawVertesesForLines(levelsByLP, svg, globalVerticies);\n}\n\nexport function appendLP(mainLine, LParr, globalVerticies) {\n  let levelsByPassingEdges = [];\n  let levelsByLP = [];\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    levelsByPassingEdges.forEach((level, index) => {\n      if (appended) {\n        return;\n      }\n\n      // check if we can append the current light path to the current level\n      if (\n        !cross(level, LP.passing_edges) &&\n        checkCrossVerteses(LP, levelsByLP[index])\n      ) {\n        // append the light path   ----------------------\n        levelsByPassingEdges[index] = levelsByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        levelsByLP[index].push(LP);\n        //------------------------------------------------\n\n        // making the light paths color as his level   -----------------\n        LP.wavelength.r = levelsByLP[index][0].wavelength.r;\n        LP.wavelength.g = levelsByLP[index][0].wavelength.g;\n        LP.wavelength.b = levelsByLP[index][0].wavelength.b;\n        //------------------------------------------------\n\n        appended = true;\n      }\n    });\n\n    if (!appended) {\n      levelsByPassingEdges.push(LP.passing_edges);\n      levelsByLP.push([LP]);\n    }\n  });\n\n  let svg = drawLPS(mainLine, levelsByLP, globalVerticies);\n  drawVertesesForLines(levelsByLP, svg, globalVerticies);\n  return levelsByLP.length;\n}\n\nexport function appendLPAVG(mainLine, LParr, globalVerticies) {\n  let levelsByPassingEdges = [];\n  let levelsByLP = [];\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    levelsByPassingEdges.forEach((level, index) => {\n      if (appended) {\n        return;\n      }\n\n      // check if we can append the current light path to the current level\n      if (\n        !cross(level, LP.passing_edges) &&\n        checkCrossVerteses(LP, levelsByLP[index])\n      ) {\n        // append the light path   ----------------------\n        levelsByPassingEdges[index] = levelsByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        levelsByLP[index].push(LP);\n        //------------------------------------------------\n\n        // making the light paths color as his level   -----------------\n        LP.wavelength.r = levelsByLP[index][0].wavelength.r;\n        LP.wavelength.g = levelsByLP[index][0].wavelength.g;\n        LP.wavelength.b = levelsByLP[index][0].wavelength.b;\n        //------------------------------------------------\n\n        appended = true;\n      }\n    });\n\n    if (!appended) {\n      levelsByPassingEdges.push(LP.passing_edges);\n      levelsByLP.push([LP]);\n    }\n  });\n\n  // let svg = drawLPS(mainLine, levelsByLP, globalVerticies);\n  // drawVertesesForLines(levelsByLP, svg, globalVerticies);\n  return levelsByLP.length;\n}\n\nfunction drawLPS(mainLine, levels, globalVerticies) {\n  let svg = optimalLines(\n    [mainLine],\n    globalVerticies,\n    \".svgpainter2\",\n    levels.length * 50 + 70\n  );\n\n  let lineLenght = 250 / globalVerticies;\n\n  levels.forEach((level, levelIndex) => {\n    level.forEach((LP, LPindex) => {\n      LP.passing_edges.forEach((partOfLP) => {\n        aadrawLPline2(\n          svg,\n          partOfLP * lineLenght,\n          (partOfLP + 1) * lineLenght,\n          levelIndex + 1,\n          10,\n          `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n          LP.index\n        );\n      });\n    });\n  });\n  return svg;\n}\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Vertex from \"../Structures/Vertex\";\r\nimport Edge from \"../Structures/Edge\";\r\nimport { randN, createLightpathsLine } from \"../Structures/helpFunc.js\";\r\nimport { shuffle } from \"./Circles\";\r\nimport { optimalLines, appendLP, appendLPAVG } from \"./lines\";\r\nimport \"../App.css\";\r\n\r\nexport default class Line extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      vertexCount: 0,\r\n      linesCount: 0,\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      lpOnlineCNT: 0,\r\n      showLpOnlineCNT: false,\r\n      levelsCNT: 0,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      cAVG: 0,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n    };\r\n    this.produceLightpaths = this.produceLightpaths.bind(this);\r\n  }\r\n\r\n  // a function that creates the graph \r\n  produceGraph = () => {\r\n    const { vertexCount, vertexArr, edgeArr } = this.state;\r\n\r\n    for (let i = 0; i < vertexCount; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          vertexArr.push(new Vertex(null, i, null, i + 1, i));\r\n          edgeArr.push(new Edge(null, i + 1, 0, i + 1, i));\r\n          break;\r\n        case vertexCount - 1:\r\n          vertexArr.push(new Vertex(i - 1, null, i - 1, null, i));\r\n          break;\r\n        default:\r\n          vertexArr.push(new Vertex(i - 1, i, i - 1, i + 1, i));\r\n          edgeArr.push(new Edge(i, i + 1, i - 1, i + 1, i));\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // a function to load the state with intial values\r\n  loadState = (event) => {\r\n    if (event.target.value === 0) {\r\n      this.setState({ showSimulateButton: false });\r\n    } else {\r\n      this.setState({ showSimulateButton: true });\r\n    }\r\n    if (event.target.placeholder === \"Nodes\") {\r\n      this.setState({ vertexCount: event.target.value });\r\n    } else if (event.target.placeholder === \"Lines\") {\r\n      this.setState({ linesCount: event.target.value });\r\n    }\r\n\r\n  };\r\n\r\n  // this function is responsible for creating the lightpaths (visual/ theoritical)\r\n  async produceLightpaths() {\r\n    const { vertexCount, vertexArr, linesCount, lightpathArr, LParr } =\r\n      this.state;\r\n\r\n    let optimalLinesNum = parseInt(linesCount, 10);\r\n    this.setState({ levelsCNT: optimalLinesNum });\r\n\r\n    let optimalLinesArr = new Array(optimalLinesNum);\r\n    const vertexArrLine = [...vertexArr];\r\n   \r\n\r\n    for (let i = 0; i < optimalLinesNum; i++) {\r\n      optimalLinesArr[i] = randN(vertexArrLine);\r\n      optimalLinesArr[i].unshift(vertexArr[0]);\r\n      optimalLinesArr[i].push(vertexArr[vertexCount - 1]);\r\n    }\r\n\r\n    lightpathArr.push(...createLightpathsLine(optimalLinesArr, vertexArr));\r\n\r\n    optimalLinesArr.unshift(vertexArr);\r\n\r\n    optimalLines(optimalLinesArr, vertexArr.length);\r\n\r\n    LParr.push(...shuffle(lightpathArr));\r\n\r\n    await this.setState({\r\n      lpOnlineCNT:\r\n        this.state.lpOnlineCNT +\r\n        LParr.length +\r\n        appendLP(vertexArr, LParr, vertexArr.length),\r\n    });\r\n  }\r\n\r\n  // showing the average of the runs\r\n  calcAVG = () => {\r\n    this.setState({\r\n      showLpOnlineCNT: false,\r\n      showAVGField: true,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      showAVG: false,\r\n    });\r\n  };\r\n\r\n  //calculating the statistics of the runs (worst/average)\r\n  stat = () => {\r\n    const { vertexArr, lightpathArr, LParr } = this.state;\r\n\r\n    let cRatioAVG = 0;\r\n    let max = 0;\r\n    for (let i = 0; i < document.querySelector(\"#AVG\").value; i++) {\r\n      let onlineADMsinthisRun =\r\n        LParr.length +\r\n        appendLPAVG(vertexArr, shuffle(lightpathArr), vertexArr.length);\r\n      let offlineADMsinthisRun = this.state.LParr.length + this.state.levelsCNT;\r\n\r\n      cRatioAVG = cRatioAVG + onlineADMsinthisRun / offlineADMsinthisRun;\r\n      if (onlineADMsinthisRun / offlineADMsinthisRun > max)\r\n        max = onlineADMsinthisRun / offlineADMsinthisRun;\r\n    }\r\n\r\n    this.setState({\r\n      cAVGworstCase: max.toFixed(2),\r\n      showAVGcRatioField: true,\r\n      cAVG: (cRatioAVG / document.querySelector(\"#AVG\").value).toFixed(2),\r\n    });\r\n  };\r\n\r\n// a function to complete run the algorithm with stepping over the steps of the calculations \r\n  completeRun = () => {\r\n    const { LParr } = this.state;\r\n    let counter = 0;\r\n\r\n    while (counter < LParr.length) {\r\n      let paths = document.querySelectorAll(`.p${counter}`);\r\n\r\n      for (let j = 0; j < LParr[counter].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n      let nodes = document.querySelectorAll(`.p${counter}999`);\r\n\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        nodes[i].removeAttribute(\"display\");\r\n      }\r\n      counter = counter + 1;\r\n    }\r\n\r\n    this.setState({ lpCNT: this.state.lpCNT + counter });\r\n    this.setState({ showLpOnlineCNT: true });\r\n  };\r\n\r\n\r\n  //showing the optimal solution on the screen\r\n  showOptimalSolution = () => {\r\n    document.querySelector(\".svgpainter\").querySelector(\"svg\").attributes\r\n      .display.value === \"none\"\r\n      ? (document\r\n        .querySelector(\".svgpainter\")\r\n        .querySelector(\"svg\").attributes.display.value = \"\")\r\n      : (document\r\n        .querySelector(\".svgpainter\")\r\n        .querySelector(\"svg\").attributes.display.value = \"none\");\r\n  };\r\n\r\n    //showing the online solution on the screen\r\n\r\n  showOnlineSolution = () => {\r\n    document.querySelector(\".svgpainter2\").querySelector(\"svg\").attributes\r\n      .display.value === \"none\"\r\n      ? (document\r\n        .querySelector(\".svgpainter2\")\r\n        .querySelector(\"svg\").attributes.display.value = \"\")\r\n      : (document\r\n        .querySelector(\".svgpainter2\")\r\n        .querySelector(\"svg\").attributes.display.value = \"none\");\r\n  };\r\n\r\n  //a function to step ove the minADM steps one by one\r\n  appear = () => {\r\n    document\r\n      .querySelector(\".svgpainter\")\r\n      .querySelector(\"svg\").attributes.display.value = \"\";\r\n    document\r\n      .querySelector(\".svgpainter2\")\r\n      .querySelector(\"svg\").attributes.display.value = \"\";\r\n\r\n    const { LParr, lpCNT } = this.state;\r\n    let paths = document.querySelectorAll(`.p${lpCNT}`);\r\n\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (var j = 0; j < LParr[lpCNT].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n    }\r\n\r\n    paths = document.querySelectorAll(`.p${lpCNT}999`);\r\n\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (var i = 0; i < paths.length; i++) {\r\n        paths[i].removeAttribute(\"display\");\r\n      }\r\n    }\r\n    this.setState({ lpCNT: this.state.lpCNT + 1 });\r\n\r\n    console.log(\r\n      this.state.lpOnlineCNT,\r\n      this.state.LParr.length,\r\n      this.state.levelsCNT\r\n    );\r\n  };\r\n\r\n  //a function to run the simulation functions one by one\r\n  simulate = () => {\r\n    this.setState({\r\n      showOffline: true,\r\n      showOnline: true,\r\n      showSimulateButton: false,\r\n      showInputFields: false,\r\n      showAVG: true,\r\n    });\r\n    this.produceGraph();\r\n    this.produceLightpaths();\r\n  };\r\n\r\n\r\n  // a function to reset the state of the component\r\n  reset = () => {\r\n    if (this.state.showInputFields) {\r\n      document.querySelectorAll(\"input\")[0].value = \"\";\r\n      document.querySelectorAll(\"input\")[1].value = \"\";\r\n    }\r\n\r\n    document.querySelector(\".svgpainter\").innerHTML = \"\";\r\n    document.querySelector(\".svgpainter2\").innerHTML = \"\";\r\n\r\n    this.setState({\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      linesCount: 0,\r\n      lpOnlineCNT: 0,\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      vertexCount: 0,\r\n      showLpOnlineCNT: false,\r\n      levelsCNT: 0,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n      cAVG: 0,\r\n    });\r\n  };\r\n\r\n  //rendering the components on the screen\r\n  render() {\r\n    return (\r\n      <div className=\"container tc\">\r\n        <h1>Line Topology Simulation</h1>\r\n\r\n        {this.state.showInputFields ? (\r\n          <div\r\n            className=\"tc\"\r\n            style={{ display: \"flex\", flexDirection: \"row\", gap: \"10px\" }}\r\n          >\r\n            <div>\r\n              <p>Enter The Number Of Nodes</p>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Nodes\"\r\n                style={{ borderRadius: \"10px\" }}\r\n                onBlur={this.loadState}\r\n                className=\"pa1 ma2 ba b--light-blue \"\r\n              />\r\n            </div>\r\n            <div>\r\n              <p>Enter The Number Of Lines</p>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Lines\"\r\n                style={{ borderRadius: \"10px\" }}\r\n                onChange={this.loadState}\r\n                className=\"pa1 ma2 ba b--light-blue \"\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        {this.state.showAVGField ? (\r\n          <div\r\n            className=\"tc\"\r\n            style={{ display: \"flex\", flexDirection: \"row\", gap: \"10px\" }}\r\n          >\r\n            <div>\r\n              <p>Enter Number Of Desired runs for Average Calcs</p>\r\n              <input\r\n                id=\"AVG\"\r\n                type=\"text\"\r\n                placeholder=\"Runs\"\r\n                style={{ borderRadius: \"10px\" }}\r\n                className=\"pa1 ma2 ba b--light-blue \"\r\n              />\r\n              <button className=\"generalButton\" onClick={this.stat}>\r\n                Calc Average\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n\r\n        <div>\r\n          <Link to=\"/\" className=\"generalButton\">\r\n            {\" \"}\r\n            Go Home{\" \"}\r\n          </Link>\r\n          {!this.state.showSimulateButton ? null : (\r\n            <button className=\"generalButton\" onClick={this.simulate}>\r\n              Simulate\r\n            </button>\r\n          )}\r\n          {!this.state.showOffline ? null : (\r\n            <button className=\"generalButton\" onClick={this.appear}>\r\n              Step Over\r\n            </button>\r\n          )}\r\n          {!this.state.showOnline ? null : (\r\n            <>\r\n              <button className=\"generalButton\" onClick={this.completeRun}>\r\n                Compelete Run\r\n              </button>\r\n              <button\r\n                className=\"generalButton\"\r\n                onClick={this.showOptimalSolution}\r\n              >\r\n                Optimal Solution\r\n              </button>\r\n              <button\r\n                className=\"generalButton\"\r\n                onClick={this.showOnlineSolution}\r\n              >\r\n                Online Solution\r\n              </button>\r\n            </>\r\n          )}\r\n          {this.state.showAVG ? (\r\n            <button className=\"generalButton\" onClick={this.calcAVG}>\r\n              Average\r\n            </button>\r\n          ) : null}\r\n          <button className=\"generalButton\" onClick={this.reset}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"tc\">\r\n          {this.state.showAVGcRatioField ? (\r\n            <div\r\n              className=\"tc\"\r\n              style={{ display: \"flex\", flexDirection: \"row\", gap: \"10px\" }}\r\n            >\r\n              <h3>\r\n                The Average C-Ratio for the desired number of runs is :{\" \"}\r\n                {this.state.cAVG} <br />\r\n                The Worst Case C-Ratio for the desired number of runs is :{\" \"}\r\n                {this.state.cAVGworstCase}\r\n              </h3>\r\n            </div>\r\n          ) : null}\r\n          {this.state.showLpOnlineCNT ? (\r\n            <h3>\r\n              The C-Ratio in this Simulation is :{\" \"}\r\n              {(\r\n                this.state.lpOnlineCNT /\r\n                (this.state.LParr.length + this.state.levelsCNT)\r\n              ).toFixed(2)}\r\n            </h3>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"container2\">\r\n          <div\r\n            className=\" tc\"\r\n            style={{ display: this.state.showOffline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              Optimal Solution <br /> Total ADMs:{\" \"}\r\n              {this.state.LParr.length + this.state.levelsCNT}\r\n            </h3>\r\n            <div className=\"tc svgpainter container\"></div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"tc \"\r\n            style={{ display: this.state.showOnline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              OnLine minADM Solution <br />\r\n              Total ADMs:\r\n              {this.state.showLpOnlineCNT ? this.state.lpOnlineCNT : null}\r\n            </h3>\r\n            <h4>\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"Next Lightpath start is : \" +\r\n                  this.state.LParr[this.state.lpCNT].startVertex\r\n                  : null\r\n                : null}{\" \"}\r\n              <br />{\" \"}\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"end is : \" + this.state.LParr[this.state.lpCNT].endVertex\r\n                  : null\r\n                : null}\r\n            </h4>\r\n            <div\r\n              className=\"tc svgpainter2 container\"\r\n              style={{\r\n                transform: \"all 1s ease-in-out\",\r\n              }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container tc pa4\">\r\n        <h1>\r\n          Today we are going to present to you the MinADM Algorithm and\r\n          simulate it!\r\n        </h1>\r\n        <h3>Buckle Up!</h3>\r\n        <p>\r\n          We are going to present infront of you simulations on two\r\n          topologies, Ring and Line Topology.\r\n        </p>\r\n        <div>\r\n          <Link to=\"/Ring\" className=\"generalButton\"> Ring Topology</Link>\r\n\r\n          <Link to=\"/Line\" className=\"generalButton\"> Line Topology</Link>\r\n        </div>\r\n        <h4 style={{ alignSelf: \"center\" }}>\r\n          This Project is Brought to you by Amir & Fida\r\n        </h4>\r\n        <h4>Supervised By Prof. Shmuel</h4>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport Ring from \"./Components/Ring\";\r\nimport Line from \"./Components/Line\";\r\nimport Home from \"./Components/Home\";\r\n\r\nconst Router = () => (\r\n  <HashRouter basename='/'>\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact={true} />\r\n        <Route path=\"/Ring\" component={Ring} />\r\n        <Route path=\"/Line\" component={Line} />\r\n      </Switch>\r\n\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nexport default Router;","import React from \"react\";\n\n\nexport default class Loading extends React.Component {\n  render() {\n    return (\n        <div className=\"row justify-content-center\">\n          <div className=\"col ml-3 mt-3\">\n\n          </div>\n        </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport Router from \"./Router\";\r\nimport Loading from \"./Loading\";\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: true\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isLoading: false\r\n      });\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    return this.state.isLoading ? <Loading /> : <Router />;\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport 'tachyons';\nReactDOM.render(<div className=\"container\">\n  <App />\n</div>\n\n  , document.getElementById(\"root\"));\n"],"sourceRoot":""}