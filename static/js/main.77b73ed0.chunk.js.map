{"version":3,"sources":["Structures/Vertex.js","Structures/Edge.js","Structures/Lightpath.js","Structures/helpFunc.js","Components/Circles.js","Components/Ring.js","Components/lines.js","Components/Line.js","Components/Home.js","Router.js","Components/Header.js","Loading.js","App.js","index.js"],"names":["Vertex","edge1","edge2","neighbor_vertex1","neighbor_vertex2","index","passing_lightpaths","this","Edge","neighbor_edge1","neighbor_edge2","vertex1","vertex2","Lightpath","wavelength","startVertex","endVertex","passing_edges","rand","min","max","Math","floor","random","randN","array","len","length","n","result","Array","taken","RangeError","x","sort","a","b","createLightpaths","optimalCirclesArr","vertexArr","edgeArr","lightpaths","i","circle","count","push","r","g","forEach","lightpath","v1","v2","vertex","start","target","current","edges_on_the_way","JSON","stringify","check_path","createLightpathsLine","optimalLinesArr","line","checkPathL","drawedje2","svg","cnt","radius","lineWidth","col","append","attr","PI","drawedje","drawcircles","arr","globalVertises","nodesWidth","className","d3","select","j","difference","cross","LPaths1","LPaths2","shuffle","drawVerteses","circles","LP","drawLP","LPindex","edge","checkCrossVerteses","f1","mainCircle","LParr","edgeCNT","circlesByLp","circlesByPassingEdges","appended","concat","countADMsOnline","onlineADMsnoDrawing","countADMs","edgeCounter","Ring","loadState","event","state","circlesCount","vertexCount","setState","showSimulateButton","placeholder","value","produceGraph","produceLightpathsOptimal","circlesArr","lightpathArr","lpOnlineCNT","optimalCirclesNum","parseInt","unshift","calcAVG","showLpOnlineCNT","showAVGField","showOffline","showOnline","showAVG","stat","cRatioAVG","document","querySelector","onlineADMsinthisRun","offlineADMsinthisRun","cAVGworstCase","toFixed","showAVGcRatioField","cAVG","completeRun","counter","paths","querySelectorAll","removeAttribute","nodes","lpCNT","showOptimalSolution","attributes","display","showOnlineSolution","appear","console","log","simulate","showInputFields","reset","innerHTML","style","flexDirection","gap","type","width","borderRadius","onBlur","onChange","id","onClick","to","undefined","transform","Component","aadrawLPline","end","indexOfLevel","aadrawLPline2","optimalLines","levels","globalVerticies","svgclassName","svgHeight","lineLenght","lightPaths","indexInLp","drawVertesesForLines","level","appendLP","mainLine","levelsByPassingEdges","levelsByLP","levelIndex","partOfLP","drawLPS","appendLPAVG","Line","linesCount","levelsCNT","produceLightpaths","bind","optimalLinesNum","vertexArrLine","pop","shift","Home","alignSelf","Router","basename","path","component","exact","Loading","React","App","isLoading","setTimeout","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.77b73ed0.chunk.js","sourcesContent":["export default class Vertex {\r\n  constructor(edge1, edge2, neighbor_vertex1, neighbor_vertex2, index, passing_lightpaths) {\r\n    this.index = index;\r\n    this.neighbor_vertex1 = neighbor_vertex1;\r\n    this.neighbor_vertex2 = neighbor_vertex2;\r\n    this.edge1 = edge1;\r\n    this.edge2 = edge2;\r\n    this.passing_lightpaths = passing_lightpaths;\r\n  }\r\n\r\n}\r\n","export default class Edge {\r\n  constructor(neighbor_edge1, neighbor_edge2, vertex1, vertex2, index, passing_lightpaths) {\r\n    this.index = index;\r\n    this.neighbor_edge1 = neighbor_edge1;\r\n    this.neighbor_edge2 = neighbor_edge2;\r\n    this.vertex1 = vertex1;\r\n    this.vertex2 = vertex2;\r\n    this.passing_lightpaths = passing_lightpaths;\r\n  }\r\n}\r\n","export default class Lightpath {\r\n  constructor(wavelength, startVertex, endVertex, index, passing_edges) {\r\n    this.wavelength = wavelength;\r\n    this.passing_edges = passing_edges;\r\n    this.startVertex = startVertex;\r\n    this.endVertex = endVertex;\r\n    this.index = index;\r\n  }\r\n}","import Lightpath from \"./Lightpath\";\nimport Vertex from \"../Structures/Vertex\";\n\nconst rand = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nconst randN = (array) => {\n  let len = array.length;\n\n  let n = Math.floor(Math.random() * len - 3) + 3;\n\n  let result = new Array(n);\n  let taken = new Array(n);\n  if (n > len) {\n    throw new RangeError(\"ERROR in length\");\n  }\n  while (n--) {\n    let x = Math.floor(Math.random() * len);\n    result[n] = array[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result.length > 1\n    ? result.sort((a, b) => (a.index > b.index ? 1 : -1))\n    : randN(array);\n};\n\nconst createLightpaths = (optimalCirclesArr, vertexArr, edgeArr) => {\n  let lightpaths = [];\n  for (let i = 0; i < optimalCirclesArr.length; i++) {\n    const circle = optimalCirclesArr[i];\n    for (let count = 0; count < circle.length - 1; count++) {\n      lightpaths.push(\n        new Lightpath(\n          { r: rand(0, 255), g: rand(0, 255), b: rand(0, 255) },\n          circle[count].index,\n          circle[count + 1].index,\n          lightpaths.length\n        )\n      );\n    }\n    lightpaths.push(\n      new Lightpath(\n        { r: rand(0, 255), g: rand(0, 255), b: rand(0, 255) },\n        circle[circle.length - 1].index,\n        circle[0].index,\n        lightpaths.length\n      )\n    );\n  }\n  lightpaths.forEach((lightpath) => {\n    lightpath.passing_edges = check_path(\n      lightpath.startVertex,\n      lightpath.endVertex,\n      vertexArr,\n      edgeArr\n    );\n  });\n  return lightpaths;\n};\n\nconst createLightpathsLine = (optimalLinesArr, vertexArr) => {\n  let lightpaths = [];\n  for (let i = 0; i < optimalLinesArr.length; i++) {\n    const line = optimalLinesArr[i];\n    for (let count = 0; count < line.length - 1; count++) {\n      lightpaths.push(\n        new Lightpath(\n          { r: rand(0, 255), g: rand(0, 255), b: rand(0, 255) },\n          line[count].index,\n          line[count + 1].index,\n          lightpaths.length\n        )\n      );\n    }\n  }\n  lightpaths.forEach((lightpath) => {\n    lightpath.passing_edges = checkPathL(\n      lightpath.startVertex,\n      lightpath.endVertex,\n      vertexArr\n    );\n  });\n  return lightpaths;\n};\n\nconst checkPathL = (v1, v2, vertex) => {\n  let start = new Vertex();\n  let target = new Vertex();\n  let current = new Vertex();\n  let edges_on_the_way = [];\n  start = { ...vertex[v1] };\n  target = { ...vertex[v2] };\n  current = { ...start };\n\n  while (!(JSON.stringify(target) === JSON.stringify(current))) {\n    edges_on_the_way.push(current.edge2);\n    current = { ...vertex[current.neighbor_vertex2] };\n  }\n  return edges_on_the_way;\n};\n\nfunction check_path(v1, v2, vertex) {\n\n  let start = new Vertex();\n  let target = new Vertex();\n  let current = new Vertex();\n  let edges_on_the_way = [];\n\n  start = { ...vertex[v1] };\n  target = { ...vertex[v2] };\n  current = { ...start };\n\n  while (!(JSON.stringify(target) === JSON.stringify(current))) {\n    edges_on_the_way.push(current.edge2);\n    current = { ...vertex[current.neighbor_vertex2] };\n  }\n\n  return edges_on_the_way;\n\n}\n\nexport { randN, rand, createLightpaths, createLightpathsLine };\n","\nimport d3 from 'd3'\n\n\nfunction drawedje2(svg, start, cnt, radius, line, lineWidth, col = 'purple', index) {\n    svg.append('svg:path')\n        .attr('d', `M50 ${start} a ${radius} ${radius} 0 0 1 0 ${radius * 2} a ${radius} ${radius} 0 0 1 0 ${radius * (-2)}`)\n        .attr('fill', 'none')\n        .attr('stroke', col)\n        .attr('stroke-width', `${lineWidth}`)\n        .attr('stroke-dasharray', `0,${cnt},${line}, ${2 * radius * Math.PI - cnt - line < 0.00001 ? 0 : 2 * radius * Math.PI - cnt - line}`)\n        .attr('display', `none`)\n        .attr('class', `p${index}`)\n}\n\n\nfunction drawedje(svg, start, cnt, radius, line, lineWidth, col = 'purple') {\n    svg.append('svg:path')\n        .attr('d', `M50 ${start} a ${radius} ${radius} 0 0 1 0 ${radius * 2} a ${radius} ${radius} 0 0 1 0 ${radius * (-2)}`)\n        .attr('fill', 'none')\n        .attr('stroke', col)\n        .attr('stroke-width', `${lineWidth}`)\n        .attr('stroke-dasharray', `0,${cnt},${line}, ${2 * radius * Math.PI - cnt - line}`)\n}\n\n\nfunction drawcircles(arr, globalVertises, nodesWidth, className = '.svgpainter') {\n\n    let svg = d3.select(className)\n        .append('svg:svg')\n        .attr('display', `none`)\n        .attr('viewBox', '0 0 90 90');\n    var length = arr.length\n\n    for (let j = 0; j < length; j++) {\n        let cnt = 0\n        let radius = 5 + (j * 3)\n        var line = ((2 * radius * Math.PI) - (globalVertises / 2)) / (globalVertises)\n        let start = 30 - (j * 3)\n\n        for (let i = 0; i < arr[j].length; i++) {\n            line = ((2 * radius * Math.PI) - (globalVertises / 2)) / (globalVertises)\n            let difference = arr[j][i].index\n            if (i > 0) {\n                difference = arr[j][i].index - arr[j][i - 1].index\n                line = (line * difference) + (difference / 2) - 0.5\n            } else {\n                if (difference === 0)\n                    line = 0\n                else\n                    line = (line * difference) + (difference / 2)\n            }\n            drawedje(svg, start, cnt, radius, line, 1)\n            cnt += line\n\n            drawedje(svg, start, cnt, radius, 0.5, nodesWidth)\n            cnt += 0.5\n        }\n        line = ((2 * radius * Math.PI) - (globalVertises / 2)) / (globalVertises)\n\n        drawedje(svg, start, cnt, radius, (2 * Math.PI * radius) - cnt, 1)\n\n\n    }\n    return svg\n}\n\n\nexport function getSVG(circlesArr, globalVertises) {\n    drawcircles(circlesArr, globalVertises, 3)\n}\n\n\nexport function cross(LPaths1, LPaths2) {\n    for (var i = 0; i < LPaths1.length; i++)\n        for (var j = 0; j < LPaths2.length; j++)\n            if (LPaths1[i] === LPaths2[j]) {\n                return true\n            }\n    return false\n}\n\n\nexport function shuffle(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\nexport function wait(ms) {\n    var start = Date.now(),\n        now = start;\n    while (now - start < ms) {\n        now = Date.now();\n    }\n\n}\n\nexport function f(mainCircle, LParr, globalVertises) {\n    let circles = []\n    let svg = drawcircles(mainCircle, globalVertises, 3, '.svgpainter2')\n\n\n    // get each light path one by one and put it in a circle\n    LParr.forEach(LP => {\n        let appended = false\n\n        // for each circle check if there is room for current light path\n        circles.forEach((circle, index) => {\n            if (appended) {\n                return\n            }\n            let newCircle = false\n            circle.forEach(LPinCircle => {\n                if (newCircle)\n                    return\n                if (cross(LP.passing_edges, LPinCircle.passing_edges))\n                    newCircle = true\n            })\n\n            if (newCircle) {\n                return\n            }\n\n            circle.forEach(LPinCircle => {\n                if (appended) {\n                    return\n                }\n\n                if (cross([LPinCircle.startVertex, LPinCircle.endVertex], [LP.startVertex, LP.endVertex])) {\n                    appended = true\n                    circles[index].push(LP)\n\n\n                    let start = 30 - ((index + 1) * 3)\n                    let radius = 5 + ((index + 1) * 3)\n                    let line = ((2 * radius * Math.PI)) / (globalVertises)\n                    LP.wavelength.r = LPinCircle.wavelength.r\n                    LP.wavelength.g = LPinCircle.wavelength.g\n                    LP.wavelength.b = LPinCircle.wavelength.b\n\n                    LP.passing_edges.forEach(edge => {\n\n                        drawedje(svg, start, edge * line, radius, line, 3, `rgb(${LPinCircle.wavelength.r},${LPinCircle.wavelength.g},${LPinCircle.wavelength.b})`)\n                    })\n\n                    return\n                }\n            })\n\n        });\n\n        if (!appended) {\n            circles.push([LP])\n\n\n            let start = 30 - ((circles.length) * 3)\n            let radius = 5 + ((circles.length) * 3)\n            let line = ((2 * radius * Math.PI)) / (globalVertises)\n            LP.passing_edges.forEach(edge => {\n                //wait('2000')\n\n                drawedje(svg, start, edge * line, radius, line, 3, `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`)\n            })\n\n\n        }\n\n\n    });\n    drawVerteses(circles, svg, globalVertises)\n\n}\n\n\n\nfunction drawVerteses(circles, svg, globalVertises) {\n    circles.forEach((circle, index) => {\n        circle.forEach(LP => {\n            let start = 30 - ((index + 1) * 3)\n            let radius = 5 + ((index + 1) * 3)\n            let line = ((2 * radius * Math.PI)) / (globalVertises)\n\n            drawedje2(svg, start, LP.startVertex * line, radius, 0.5, 3, 'red', `${LP.index}999`)\n            drawedje2(svg, start, LP.endVertex * line, radius, 0.5, 3, 'red', `${LP.index}999`)\n        })\n    });\n}\n\n\nfunction drawLP(LP, index, globalVertises, svg, LPindex) {\n    let start = 30 - ((index) * 3)\n    let radius = 5 + ((index) * 3)\n    let line = ((2 * radius * Math.PI)) / (globalVertises)\n\n    LP.passing_edges.forEach(edge => {\n        drawedje2(svg, start, edge * line, radius, line, 3, `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`, LPindex)\n    })\n}\n\nexport function checkCrossVerteses(LP, circle) {\n    for (var i = 0; i < circle.length; i++) {\n        if (cross([circle[i].startVertex, circle[i].endVertex], [LP.startVertex, LP.endVertex])) {\n            return true\n        }\n    }\n    return false\n}\n\nexport function f1(mainCircle, LParr, globalVertises, edgeCNT) {\n    let circlesByLp = []\n    let circlesByPassingEdges = []\n    let svg = drawcircles(mainCircle, globalVertises, 3, '.svgpainter3')\n\n    LParr.forEach((LP, LPindex) => {\n        LP.index = LPindex\n        let appended = false\n        circlesByPassingEdges.forEach((circle, index) => {\n            if (appended) {\n                return\n            }\n            if ((!cross(LP.passing_edges, circle)) && checkCrossVerteses(LP, circlesByLp[index])) {\n\n                circlesByPassingEdges[index] = circlesByPassingEdges[index].concat(LP.passing_edges)\n                circlesByLp[index].push(LP)\n\n                LP.wavelength.r = circlesByLp[index][0].wavelength.r\n                LP.wavelength.g = circlesByLp[index][0].wavelength.g\n                LP.wavelength.b = circlesByLp[index][0].wavelength.b\n                drawLP(LP, index + 1, globalVertises, svg, LPindex)\n\n                appended = true\n            }\n        })\n        if (!appended) {\n            circlesByPassingEdges.push(LP.passing_edges)\n            circlesByLp.push([LP])\n            drawLP(LP, circlesByLp.length, globalVertises, svg, LPindex)\n        }\n    })\n    drawVerteses(circlesByLp, svg, globalVertises)\n    return countADMsOnline(circlesByLp, edgeCNT)\n}\n\nexport function onlineADMsnoDrawing(mainCircle, LParr, globalVertises, edgeCNT) {\n    let circlesByLp = []\n    let circlesByPassingEdges = []\n    let svg = drawcircles(mainCircle, globalVertises, 3, '.svgpainter3')\n\n    LParr.forEach((LP, LPindex) => {\n        LP.index = LPindex\n        let appended = false\n        circlesByPassingEdges.forEach((circle, index) => {\n            if (appended) {\n                return\n            }\n            if ((!cross(LP.passing_edges, circle)) && checkCrossVerteses(LP, circlesByLp[index])) {\n\n                circlesByPassingEdges[index] = circlesByPassingEdges[index].concat(LP.passing_edges)\n                circlesByLp[index].push(LP)\n\n                LP.wavelength.r = circlesByLp[index][0].wavelength.r\n                LP.wavelength.g = circlesByLp[index][0].wavelength.g\n                LP.wavelength.b = circlesByLp[index][0].wavelength.b\n                // drawLP(LP, index + 1, globalVertises, svg, LPindex)\n\n                appended = true\n            }\n        })\n        if (!appended) {\n            circlesByPassingEdges.push(LP.passing_edges)\n            circlesByLp.push([LP])\n            // drawLP(LP, circlesByLp.length, globalVertises, svg, LPindex)\n        }\n    })\n    // drawVerteses(circlesByLp, svg, globalVertises)\n    return countADMsOnline(circlesByLp, edgeCNT)\n}\n\n\nconst countADMsOnline = (circlesByLp, edgeCNT) => {\n    let countADMs = 0;\n    circlesByLp.forEach(circle => {\n        let edgeCounter = 0\n        circle.forEach(lightpath => edgeCounter = lightpath.passing_edges.length + edgeCounter)\n        edgeCounter === edgeCNT ? countADMs = countADMs + circle.length : countADMs = countADMs + circle.length + 1\n    })\n    return countADMs;\n}\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Vertex from \"../Structures/Vertex\";\r\nimport Edge from \"../Structures/Edge\";\r\n\r\nimport { rand, randN, createLightpaths } from \"../Structures/helpFunc.js\";\r\nimport { getSVG, f1, shuffle, onlineADMsnoDrawing} from \"./Circles\";\r\n\r\nimport \"../App.css\";\r\n\r\nexport default class Ring extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      vertexCount: 0,\r\n      circlesCount: 0,\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      lpOnlineCNT: 0,\r\n      showLpOnlineCNT: false,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n      cAVG: 0,\r\n    };\r\n  }\r\n\r\n  loadState = (event) => {\r\n    if (this.state.circlesCount === 0 || this.state.vertexCount === 0) { this.setState({ showSimulateButton: false }) } else { this.setState({ showSimulateButton: true }) }\r\n    if (event.target.placeholder === 'Nodes') {\r\n      this.setState({ vertexCount: event.target.value });\r\n    } else if (event.target.placeholder === 'Circles') {\r\n      this.setState({ circlesCount: event.target.value });\r\n    }\r\n  };\r\n\r\n  produceGraph = () => {\r\n    const { vertexCount, vertexArr, edgeArr } = this.state;\r\n\r\n    for (let i = 0; i < vertexCount; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          vertexArr.push(\r\n            new Vertex(vertexCount - 1, i, vertexCount - 1, i + 1, i)\r\n          );\r\n          edgeArr.push(new Edge(vertexCount - 1, i, i, i + 1, i));\r\n          break;\r\n        case vertexCount - 1:\r\n          vertexArr.push(new Vertex(i - 1, vertexCount - 1, i - 1, 0, i));\r\n          edgeArr.push(new Edge(vertexCount - 1 - 1, 0, vertexCount - 1, 0, i));\r\n          break;\r\n        default:\r\n          vertexArr.push(new Vertex(i - 1, i, i - 1, i + 1, i));\r\n          edgeArr.push(new Edge(i - 1, i + 1, i, i + 1, i));\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  produceLightpathsOptimal = () => {\r\n    const {\r\n      circlesCount,\r\n      vertexArr,\r\n      edgeArr,\r\n      lightpathArr,\r\n      LParr,\r\n      lpOnlineCNT,\r\n    } = this.state;\r\n    const optimalCirclesNum = parseInt(circlesCount, 10);\r\n\r\n    let optimalCirclesArr = new Array(optimalCirclesNum);\r\n\r\n    for (let i = 0; i < optimalCirclesNum; i++) {\r\n      optimalCirclesArr[i] = randN(vertexArr);\r\n    }\r\n\r\n    lightpathArr.push(...createLightpaths(optimalCirclesArr, vertexArr));\r\n\r\n    optimalCirclesArr.unshift(vertexArr);\r\n\r\n    getSVG(optimalCirclesArr, vertexArr.length);\r\n    LParr.push(...shuffle(lightpathArr));\r\n    this.setState({\r\n      lpOnlineCNT:\r\n        lpOnlineCNT + f1([vertexArr], LParr, vertexArr.length, edgeArr.length),\r\n    });\r\n  };\r\n\r\n  calcAVG = () => {\r\n    this.setState({ showLpOnlineCNT: false, showAVGField: true, showOffline: false, showOnline: false, showAVG: false, })\r\n  }\r\n\r\n\r\n  stat = () => {\r\n    const {\r\n      vertexArr,\r\n      lightpathArr,\r\n      LParr,\r\n      edgeArr\r\n    } = this.state;\r\n\r\n    let cRatioAVG = 0\r\n    let max = 0\r\n\r\n    for (let i = 0; i < document.querySelector('#AVG').value; i++) {\r\n      let onlineADMsinthisRun = onlineADMsnoDrawing([vertexArr], shuffle(lightpathArr), vertexArr.length, edgeArr.length)\r\n      let offlineADMsinthisRun = this.state.LParr.length\r\n\r\n      cRatioAVG = cRatioAVG + (onlineADMsinthisRun / offlineADMsinthisRun)\r\n      if ((onlineADMsinthisRun / offlineADMsinthisRun) > max) max = onlineADMsinthisRun / offlineADMsinthisRun;\r\n    }\r\n    this.setState({ cAVGworstCase: max.toFixed(2), showAVGcRatioField: true, cAVG: (cRatioAVG / document.querySelector('#AVG').value).toFixed(2) })\r\n\r\n\r\n  }\r\n\r\n  completeRun = () => {\r\n    const { LParr } = this.state;\r\n    let counter = 0;\r\n\r\n    while (counter < LParr.length) {\r\n\r\n      let paths = document.querySelectorAll(`.p${counter}`);\r\n\r\n      for (let j = 0; j < LParr[counter].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n      let nodes = document.querySelectorAll(`.p${counter}999`);\r\n\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        nodes[i].removeAttribute(\"display\");\r\n      }\r\n      counter = counter + 1;\r\n\r\n    }\r\n\r\n    this.setState({ lpCNT: this.state.lpCNT + counter });\r\n    this.setState({ showLpOnlineCNT: true });\r\n\r\n  }\r\n\r\n  showOptimalSolution = () => {\r\n\r\n    document.querySelector('.svgpainter').querySelector('svg').attributes.display.value === 'none' ? document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = '' : document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = 'none'\r\n\r\n  }\r\n\r\n  showOnlineSolution = () => {\r\n    document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value === 'none' ? document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value = '' : document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value = 'none'\r\n\r\n  }\r\n  appear = () => {\r\n    console.log();\r\n    document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = ''\r\n    document.querySelector('.svgpainter3').querySelector('svg').attributes.display.value = ''\r\n    // document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = ''\r\n    // document.querySelector('.svgpainter2').querySelector('svg').attributes.display.value = ''\r\n\r\n    const { LParr, lpCNT } = this.state;\r\n    let paths = document.querySelectorAll(`.p${lpCNT}`);\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (let j = 0; j < LParr[lpCNT].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n    }\r\n    paths = document.querySelectorAll(`.p${lpCNT}999`);\r\n\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (let i = 0; i < paths.length; i++) {\r\n        paths[i].removeAttribute(\"display\");\r\n      }\r\n    }\r\n    this.setState({ lpCNT: this.state.lpCNT + 1 });\r\n  };\r\n\r\n  simulate = () => {\r\n\r\n    this.setState({ showOffline: true, showOnline: true, showSimulateButton: false, showInputFields: false, showAVG: true });\r\n    this.produceGraph();\r\n    this.produceLightpathsOptimal();\r\n\r\n  };\r\n\r\n  reset = () => {\r\n    if (this.state.showInputFields) {\r\n      document.querySelectorAll(\"input\")[0].value = \"\"\r\n      document.querySelectorAll(\"input\")[1].value = \"\"\r\n    }\r\n    document.querySelector(\".svgpainter\").innerHTML = \"\";\r\n    document.querySelector(\".svgpainter3\").innerHTML = \"\";\r\n\r\n    this.setState({\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      circlesCount: 0,\r\n      lpOnlineCNT: 0,\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      vertexCount: 0,\r\n      showLpOnlineCNT: false,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n      cAVG: 0,\r\n\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Ring Toplogy Simulation</h1>\r\n\r\n        {this.state.showInputFields ? (<div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n          <div>\r\n            <p>Enter The Number Of Nodes</p>\r\n\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Nodes\"\r\n              width=\"40%\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              onBlur={this.loadState}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n            />\r\n\r\n          </div>\r\n          <div>\r\n\r\n            <p>Enter The Number Of Circles</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Circles\"\r\n              width=\"40%\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              onChange={this.loadState}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n            />\r\n          </div>\r\n        </div>) : null}\r\n        {this.state.showAVGField ? <div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n          <div>\r\n            <p>Enter Number Of Desired runs for Average Calcs</p>\r\n            <input\r\n              id=\"AVG\"\r\n              type=\"text\"\r\n              placeholder=\"Runs\"\r\n              width=\"40%\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n\r\n            />\r\n            <button className=\"generalButton\" onClick={this.stat}>\r\n              Calc Average\r\n            </button>\r\n\r\n          </div>\r\n        </div> : null}\r\n        <div>\r\n          <Link to=\"/\" className=\"generalButton\">\r\n            {\" \"}\r\n            Go Home{\" \"}\r\n          </Link>\r\n          {!this.state.showSimulateButton ? null :\r\n            <button className=\"generalButton\" onClick={this.simulate}>\r\n              Simulate\r\n            </button>}\r\n\r\n          {!this.state.showOffline ? null :\r\n            <button className=\"generalButton\" onClick={this.appear}>\r\n              Step Over\r\n            </button>\r\n          }\r\n          {!this.state.showOnline ? null :\r\n            (<>\r\n              <button className=\"generalButton\" onClick={this.completeRun}>\r\n                Compelete Run\r\n              </button>\r\n              <button className=\"generalButton\" onClick={this.showOptimalSolution}>\r\n                Optimal Solution\r\n              </button>\r\n              <button className=\"generalButton\" onClick={this.showOnlineSolution}>\r\n                Online Solution\r\n              </button></>)\r\n          }\r\n          {this.state.showAVG ?\r\n            <button className=\"generalButton\" onClick={this.calcAVG}>\r\n              Average\r\n            </button> : null}\r\n          <button className=\"generalButton\" onClick={this.reset}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"tc\">\r\n          {this.state.showAVGcRatioField ? <div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n            <h3>\r\n\r\n              The Average C-Ratio for the desired number of runs is : {this.state.cAVG} <br />\r\n              The Worst Case C-Ratio for the desired number of runs is : {this.state.cAVGworstCase}\r\n            </h3>\r\n          </div> : null}\r\n          {this.state.showLpOnlineCNT ? (\r\n            <h3>\r\n              The C-Ratio in this Simulation is :{\" \"}\r\n              {(this.state.lpOnlineCNT / this.state.LParr.length).toFixed(2)}\r\n            </h3>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"container2\">\r\n          <div\r\n            className=\"tc \"\r\n            style={{ display: this.state.showOffline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              Optimal Solution <br /> Total ADMs: {this.state.LParr.length}\r\n            </h3>\r\n            <div className=\"tc svgpainter \"></div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"tc \"\r\n            style={{ display: this.state.showOnline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              OnLine minADM Solution <br />\r\n              Total ADMs:\r\n              {this.state.showLpOnlineCNT ? this.state.lpOnlineCNT : null}\r\n            </h3>\r\n            <h4>\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"Next Lightpath start is : \" +\r\n                  this.state.LParr[this.state.lpCNT].startVertex\r\n                  : null\r\n                : null}{\" \"}\r\n              <br />{\" \"}\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"end is : \" + this.state.LParr[this.state.lpCNT].endVertex\r\n                  : null\r\n                : null}\r\n            </h4>\r\n            <div\r\n              className=\"tc svgpainter3\"\r\n              style={{ transform: \"all 1s ease-in-out\" }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import d3 from \"d3\";\nimport { cross, checkCrossVerteses } from \"./Circles\";\n\nfunction aadrawLPline(svg, start, end, indexOfLevel, lineWidth, col) {\n  svg\n    .append(\"svg:line\")\n    .attr(\"x1\", `${start}`)\n    .attr(\"y1\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"x2\", `${end}`)\n    .attr(\"y2\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"stroke\", col)\n    .attr(\"stroke-width\", `${lineWidth}`);\n}\n\nfunction aadrawLPline2(svg, start, end, indexOfLevel, lineWidth, col, LPindex) {\n  svg\n    .append(\"svg:line\")\n    .attr(\"x1\", `${start}`)\n    .attr(\"y1\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"x2\", `${end}`)\n    .attr(\"y2\", `${indexOfLevel * 50 + 20}`)\n    .attr(\"stroke\", col)\n    .attr(\"stroke-width\", `${lineWidth}`)\n    .attr(\"display\", `none`)\n    .attr(\"class\", `p${LPindex}`);\n}\n\nexport function optimalLines(\n  levels,\n  globalVerticies,\n  svgclassName = \".svgpainter\",\n  svgHeight = false\n) {\n  if (svgHeight === false) {\n    svgHeight = levels.length * 70 + 20;\n  }\n\n  let svg = d3\n    .select(svgclassName)\n    .append(\"svg:svg\")\n    .attr(\"height\", `${svgHeight}`)\n    .attr(\"display\", `none`)\n    .attr(\"width\", \"250\");\n\n  let lineLenght = 250 / globalVerticies;\n\n  levels.forEach((lightPaths, indexOfLevel) => {\n    for (var i = 0; i < lightPaths.length - 1; i++) {\n      var indexInLp = lightPaths[i].index;\n      aadrawLPline(\n        svg,\n        indexInLp * lineLenght,\n        lightPaths[i + 1].index * lineLenght,\n        indexOfLevel,\n        10,\n        \"purple\"\n      );\n      aadrawLPline(\n        svg,\n        indexInLp * lineLenght,\n        indexInLp * lineLenght + 5,\n        indexOfLevel,\n        20,\n        \"purple\"\n      );\n      aadrawLPline(\n        svg,\n        lightPaths[i + 1].index * lineLenght,\n        lightPaths[i + 1].index * lineLenght + 5,\n        indexOfLevel,\n        20,\n        \"purple\"\n      );\n    }\n  });\n\n  return svg;\n}\n\nfunction drawVertesesForLines(levels, svg, globalVerticies) {\n  let lineLenght = 250 / globalVerticies;\n\n  levels.forEach((level, indexOfLevel) => {\n    level.forEach((LP, LPindex) => {\n      aadrawLPline2(\n        svg,\n        LP.passing_edges[0] * lineLenght,\n        LP.passing_edges[0] * lineLenght + 5,\n        indexOfLevel + 1,\n        20,\n        \"purple\",\n        `${LP.index}999`\n      );\n      aadrawLPline2(\n        svg,\n        (LP.passing_edges[LP.passing_edges.length - 1] + 1) * lineLenght,\n        (LP.passing_edges[LP.passing_edges.length - 1] + 1) * lineLenght + 5,\n        indexOfLevel + 1,\n        20,\n        \"purple\",\n        `${LP.index}999`\n      );\n    });\n    // let LP=level[level.length-1]\n    // let LPindex=level.length-1\n    // aadrawLPline2(svg,(LP.passing_edges[LP.passing_edges.length-1]+1)*lineLenght,((LP.passing_edges[LP.passing_edges.length-1]+1)*lineLenght)+5,+1,20,'purple',LPindex)\n  });\n}\n\nexport function onlineLines(mainLine, LParr, globalVerticies) {\n  let svg = optimalLines([mainLine], globalVerticies, \".svgpainter2\");\n\n\n  let lineLenght = 250 / globalVerticies;\n\n  let levelsByPassingEdges = [];\n  let levelsByLP = [];\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    levelsByPassingEdges.forEach((level, index) => {\n      if (appended) {\n        return;\n      }\n      if (\n        !cross(level, LP.passing_edges) &&\n        checkCrossVerteses(LP, levelsByLP[index])\n      ) {\n        levelsByPassingEdges[index] = levelsByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        levelsByLP[index].push(LP);\n\n        LP.wavelength.r = levelsByLP[index][0].wavelength.r;\n        LP.wavelength.g = levelsByLP[index][0].wavelength.g;\n        LP.wavelength.b = levelsByLP[index][0].wavelength.b;\n\n        LP.passing_edges.forEach((partOfLP) => {\n          aadrawLPline2(\n            svg,\n            partOfLP * lineLenght,\n            (partOfLP + 1) * lineLenght,\n            index + 1,\n            10,\n            `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n            LP.index\n          );\n        });\n\n        appended = true;\n      }\n    });\n\n    if (!appended) {\n      levelsByPassingEdges.push(LP.passing_edges);\n      levelsByLP.push([LP]);\n      LP.passing_edges.forEach((partOfLP) => {\n        aadrawLPline2(\n          svg,\n          partOfLP * lineLenght,\n          (partOfLP + 1) * lineLenght,\n          levelsByLP.length,\n          10,\n          `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n          LP.index\n        );\n      });\n    }\n  });\n\n  drawVertesesForLines(levelsByLP, svg, globalVerticies);\n}\n\nexport function appendLP(mainLine, LParr, globalVerticies) {\n  let levelsByPassingEdges = [];\n  let levelsByLP = [];\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    levelsByPassingEdges.forEach((level, index) => {\n      if (appended) {\n        return;\n      }\n\n      // check if we can append the current light path to the current level\n      if (\n        !cross(level, LP.passing_edges) &&\n        checkCrossVerteses(LP, levelsByLP[index])\n      ) {\n        // append the light path   ----------------------\n        levelsByPassingEdges[index] = levelsByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        levelsByLP[index].push(LP);\n        //------------------------------------------------\n\n        // making the light paths color as his level   -----------------\n        LP.wavelength.r = levelsByLP[index][0].wavelength.r;\n        LP.wavelength.g = levelsByLP[index][0].wavelength.g;\n        LP.wavelength.b = levelsByLP[index][0].wavelength.b;\n        //------------------------------------------------\n\n        appended = true;\n      }\n    });\n\n    if (!appended) {\n      levelsByPassingEdges.push(LP.passing_edges);\n      levelsByLP.push([LP]);\n    }\n  });\n\n  let svg = drawLPS(mainLine, levelsByLP, globalVerticies);\n  drawVertesesForLines(levelsByLP, svg, globalVerticies);\n  return levelsByLP.length;\n}\n\nexport function appendLPAVG(mainLine, LParr, globalVerticies) {\n  let levelsByPassingEdges = [];\n  let levelsByLP = [];\n  LParr.forEach((LP, LPindex) => {\n    LP.index = LPindex;\n    let appended = false;\n    levelsByPassingEdges.forEach((level, index) => {\n      if (appended) {\n        return;\n      }\n\n      // check if we can append the current light path to the current level\n      if (\n        !cross(level, LP.passing_edges) &&\n        checkCrossVerteses(LP, levelsByLP[index])\n      ) {\n        // append the light path   ----------------------\n        levelsByPassingEdges[index] = levelsByPassingEdges[index].concat(\n          LP.passing_edges\n        );\n        levelsByLP[index].push(LP);\n        //------------------------------------------------\n\n        // making the light paths color as his level   -----------------\n        LP.wavelength.r = levelsByLP[index][0].wavelength.r;\n        LP.wavelength.g = levelsByLP[index][0].wavelength.g;\n        LP.wavelength.b = levelsByLP[index][0].wavelength.b;\n        //------------------------------------------------\n\n        appended = true;\n      }\n    });\n\n    if (!appended) {\n      levelsByPassingEdges.push(LP.passing_edges);\n      levelsByLP.push([LP]);\n    }\n  });\n\n  // let svg = drawLPS(mainLine, levelsByLP, globalVerticies);\n  // drawVertesesForLines(levelsByLP, svg, globalVerticies);\n  return levelsByLP.length;\n}\n\nfunction drawLPS(mainLine, levels, globalVerticies) {\n\n  let svg = optimalLines(\n    [mainLine],\n    globalVerticies,\n    \".svgpainter2\",\n    levels.length * 50 + 70\n  );\n\n  let lineLenght = 250 / globalVerticies;\n\n  levels.forEach((level, levelIndex) => {\n    level.forEach((LP, LPindex) => {\n      LP.passing_edges.forEach((partOfLP) => {\n        aadrawLPline2(\n          svg,\n          partOfLP * lineLenght,\n          (partOfLP + 1) * lineLenght,\n          levelIndex + 1,\n          10,\n          `rgb(${LP.wavelength.r},${LP.wavelength.g},${LP.wavelength.b})`,\n          LP.index\n        );\n      });\n    });\n  });\n  return svg;\n}\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Vertex from \"../Structures/Vertex\";\r\nimport Edge from \"../Structures/Edge\";\r\nimport {\r\n  randN,\r\n  createLightpathsLine,\r\n} from \"../Structures/helpFunc.js\";\r\nimport { shuffle } from \"./Circles\";\r\nimport { optimalLines, appendLP, appendLPAVG } from \"./lines\";\r\nimport \"../App.css\";\r\n\r\nexport default class Line extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      vertexCount: 0,\r\n      linesCount: 0,\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      lpOnlineCNT: 0,\r\n      showLpOnlineCNT: false,\r\n      levelsCNT: 0,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      cAVG: 0,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0\r\n\r\n    };\r\n    this.produceLightpaths = this.produceLightpaths.bind(this)\r\n  }\r\n\r\n  produceGraph = () => {\r\n    const { vertexCount, vertexArr, edgeArr } = this.state;\r\n\r\n    for (let i = 0; i < vertexCount; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          vertexArr.push(new Vertex(null, i, null, i + 1, i));\r\n          edgeArr.push(new Edge(null, i + 1, 0, i + 1, i));\r\n          break;\r\n        case vertexCount - 1:\r\n          vertexArr.push(new Vertex(i - 1, null, i - 1, null, i));\r\n          break;\r\n        default:\r\n          vertexArr.push(new Vertex(i - 1, i, i - 1, i + 1, i));\r\n          edgeArr.push(new Edge(i, i + 1, i - 1, i + 1, i));\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  loadState = (event) => {\r\n    if (event.target.placeholder === 'Nodes') {\r\n      this.setState({ vertexCount: event.target.value });\r\n    } else if (event.target.placeholder === 'Lines') {\r\n      this.setState({ linesCount: event.target.value });\r\n    }\r\n    if (this.state.linesCount === 0 || this.state.vertexCount === 0) {\r\n      this.setState({ showSimulateButton: false })\r\n    } else {\r\n      this.setState({ showSimulateButton: true })\r\n    }\r\n  };\r\n\r\n  async produceLightpaths() {\r\n\r\n    const {\r\n      vertexCount,\r\n      vertexArr,\r\n      linesCount,\r\n      lightpathArr,\r\n      LParr,\r\n    } = this.state;\r\n\r\n    let optimalLinesNum = parseInt(linesCount, 10);\r\n    this.setState({ levelsCNT: optimalLinesNum });\r\n\r\n    let optimalLinesArr = new Array(optimalLinesNum);\r\n    const vertexArrLine = [...vertexArr];\r\n    vertexArrLine.pop();\r\n    vertexArrLine.shift();\r\n\r\n    for (let i = 0; i < optimalLinesNum; i++) {\r\n      optimalLinesArr[i] = randN(vertexArrLine);\r\n      optimalLinesArr[i].unshift(vertexArr[0]);\r\n      optimalLinesArr[i].push(vertexArr[vertexCount - 1]);\r\n    }\r\n\r\n    lightpathArr.push(...createLightpathsLine(optimalLinesArr, vertexArr));\r\n\r\n    optimalLinesArr.unshift(vertexArr);\r\n\r\n    optimalLines(optimalLinesArr, vertexArr.length);\r\n\r\n    LParr.push(...shuffle(lightpathArr));\r\n\r\n    await this.setState({\r\n      lpOnlineCNT:\r\n        this.state.lpOnlineCNT +\r\n        LParr.length +\r\n        appendLP(vertexArr, LParr, vertexArr.length),\r\n    })\r\n\r\n  };\r\n\r\n  calcAVG = () => {\r\n    this.setState({ showLpOnlineCNT: false, showAVGField: true, showOffline: false, showOnline: false, showAVG: false, })\r\n  }\r\n\r\n  stat = () => {\r\n    const {\r\n      vertexArr,\r\n      lightpathArr,\r\n      LParr,\r\n\r\n    } = this.state;\r\n\r\n    let cRatioAVG = 0\r\n    let max = 0\r\n    for (let i = 0; i < document.querySelector('#AVG').value; i++) {\r\n      let onlineADMsinthisRun = LParr.length + appendLPAVG(vertexArr, shuffle(lightpathArr), vertexArr.length)\r\n      let offlineADMsinthisRun = this.state.LParr.length + this.state.levelsCNT\r\n\r\n      cRatioAVG = cRatioAVG + (onlineADMsinthisRun / offlineADMsinthisRun)\r\n      if ((onlineADMsinthisRun / offlineADMsinthisRun) > max) max = onlineADMsinthisRun / offlineADMsinthisRun;\r\n    }\r\n\r\n    this.setState({ cAVGworstCase: max.toFixed(2), showAVGcRatioField: true, cAVG: (cRatioAVG / document.querySelector('#AVG').value).toFixed(2) })\r\n\r\n\r\n  }\r\n  completeRun = () => {\r\n\r\n\r\n    const { LParr } = this.state;\r\n    let counter = 0;\r\n\r\n    while (counter < LParr.length) {\r\n\r\n      let paths = document.querySelectorAll(`.p${counter}`);\r\n\r\n      for (let j = 0; j < LParr[counter].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n      let nodes = document.querySelectorAll(`.p${counter}999`);\r\n\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        nodes[i].removeAttribute(\"display\");\r\n      }\r\n      counter = counter + 1;\r\n\r\n    }\r\n\r\n    this.setState({ lpCNT: this.state.lpCNT + counter });\r\n    this.setState({ showLpOnlineCNT: true });\r\n  }\r\n\r\n  showOptimalSolution = () => {\r\n\r\n    document.querySelector('.svgpainter').querySelector('svg').attributes.display.value === 'none' ? document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = '' : document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = 'none'\r\n\r\n  }\r\n\r\n  showOnlineSolution = () => {\r\n    document.querySelector('.svgpainter2').querySelector('svg').attributes.display.value === 'none' ? document.querySelector('.svgpainter2').querySelector('svg').attributes.display.value = '' : document.querySelector('.svgpainter2').querySelector('svg').attributes.display.value = 'none'\r\n\r\n  }\r\n\r\n\r\n\r\n  appear = () => {\r\n    document.querySelector('.svgpainter').querySelector('svg').attributes.display.value = ''\r\n    document.querySelector('.svgpainter2').querySelector('svg').attributes.display.value = ''\r\n\r\n    const { LParr, lpCNT } = this.state;\r\n    let paths = document.querySelectorAll(`.p${lpCNT}`);\r\n\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (var j = 0; j < LParr[lpCNT].passing_edges.length; j++) {\r\n        paths[j].removeAttribute(\"display\");\r\n      }\r\n    }\r\n\r\n    paths = document.querySelectorAll(`.p${lpCNT}999`);\r\n\r\n    if (lpCNT >= LParr.length) {\r\n      this.setState({ showLpOnlineCNT: true });\r\n    } else {\r\n      for (var i = 0; i < paths.length; i++) {\r\n        paths[i].removeAttribute(\"display\");\r\n      }\r\n    }\r\n    this.setState({ lpCNT: this.state.lpCNT + 1 });\r\n\r\n    console.log(this.state.lpOnlineCNT\r\n      , this.state.LParr.length, this.state.levelsCNT);\r\n  };\r\n\r\n  simulate = () => {\r\n    this.setState({\r\n      showOffline: true, showOnline: true, showSimulateButton: false, showInputFields: false, showAVG: true\r\n    });\r\n    this.produceGraph();\r\n    this.produceLightpaths();\r\n  };\r\n\r\n  reset = () => {\r\n    if (this.state.showInputFields) {\r\n      document.querySelectorAll(\"input\")[0].value = \"\"\r\n      document.querySelectorAll(\"input\")[1].value = \"\"\r\n    }\r\n\r\n    document.querySelector(\".svgpainter\").innerHTML = \"\";\r\n    document.querySelector(\".svgpainter2\").innerHTML = \"\";\r\n\r\n    this.setState({\r\n      vertexArr: [],\r\n      edgeArr: [],\r\n      lightpathArr: [],\r\n      LParr: [],\r\n      linesCount: 0,\r\n      lpOnlineCNT: 0,\r\n      lpCNT: 0,\r\n      showOffline: false,\r\n      showOnline: false,\r\n      vertexCount: 0,\r\n      showLpOnlineCNT: false,\r\n      levelsCNT: 0,\r\n      showSimulateButton: false,\r\n      showInputFields: true,\r\n      showAVG: false,\r\n      showAVGField: false,\r\n      showAVGcRatioField: false,\r\n      cAVGworstCase: 0,\r\n      cAVG: 0,\r\n\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n\r\n        <h1>Line Topology Simulation</h1>\r\n\r\n        {this.state.showInputFields ? (<div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n          <div>\r\n\r\n            <p>Enter The Number Of Nodes</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Nodes\"\r\n              width=\"40%\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              onBlur={this.loadState}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n            />\r\n          </div>\r\n          <div>\r\n\r\n            <p>Enter The Number Of Lines</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Lines\"\r\n              width=\"40%\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              onChange={this.loadState}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n            />\r\n          </div>\r\n        </div>) : null}\r\n        {this.state.showAVGField ? <div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n          <div>\r\n            <p>Enter Number Of Desired runs for Average Calcs</p>\r\n            <input\r\n              id=\"AVG\"\r\n              type=\"text\"\r\n              placeholder=\"Runs\"\r\n              width=\"40%\"\r\n              style={{ borderRadius: \"10px\" }}\r\n              className=\"pa1 ma2 ba b--light-blue \"\r\n\r\n            />\r\n            <button className=\"generalButton\" onClick={this.stat}>\r\n              Calc Average\r\n            </button>\r\n\r\n          </div>\r\n        </div> : null}\r\n\r\n        <div>\r\n          <Link to=\"/\" className=\"generalButton\">\r\n            {\" \"}\r\n            Go Home{\" \"}\r\n          </Link>\r\n          {!this.state.showSimulateButton ? null :\r\n            <button className=\"generalButton\" onClick={this.simulate}>\r\n              Simulate\r\n            </button>}\r\n          {!this.state.showOffline ? null :\r\n\r\n            <button className=\"generalButton\" onClick={this.appear}>\r\n              Step Over\r\n            </button>}\r\n          {!this.state.showOnline ? null :\r\n\r\n            (<>\r\n              <button className=\"generalButton\" onClick={this.completeRun}>\r\n                Compelete Run\r\n              </button>\r\n              <button className=\"generalButton\" onClick={this.showOptimalSolution}>\r\n                Optimal Solution\r\n              </button>\r\n              <button className=\"generalButton\" onClick={this.showOnlineSolution}>\r\n                Online Solution\r\n              </button></>)}\r\n          {this.state.showAVG ?\r\n            <button className=\"generalButton\" onClick={this.calcAVG}>\r\n              Average\r\n            </button> : null}\r\n          <button className=\"generalButton\" onClick={this.reset}>\r\n            Reset\r\n          </button>\r\n\r\n        </div>\r\n\r\n        <div className=\"tc\">\r\n          {this.state.showAVGcRatioField ? <div className=\"tc\" style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\r\n            <h3>\r\n\r\n              The Average C-Ratio for the desired number of runs is : {this.state.cAVG} <br />\r\n              The Worst Case C-Ratio for the desired number of runs is : {this.state.cAVGworstCase}\r\n            </h3>\r\n          </div> : null}\r\n          {this.state.showLpOnlineCNT ? (\r\n            <h3>\r\n              The C-Ratio in this Simulation is :{\" \"}\r\n              {(\r\n                this.state.lpOnlineCNT /\r\n                (this.state.LParr.length + this.state.levelsCNT)\r\n              ).toFixed(2)}\r\n            </h3>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"container2\">\r\n          <div\r\n            className=\" tc\"\r\n            style={{ display: this.state.showOffline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              Optimal Solution <br /> Total ADMs:{\" \"}\r\n              {this.state.LParr.length + this.state.levelsCNT}\r\n            </h3>\r\n            <div className=\"tc svgpainter container\"></div>\r\n          </div>\r\n\r\n          <div\r\n            className=\"tc \"\r\n            style={{ display: this.state.showOnline ? null : \"none\" }}\r\n          >\r\n            <h3>\r\n              OnLine minADM Solution <br />\r\n              Total ADMs:\r\n              {this.state.showLpOnlineCNT ? this.state.lpOnlineCNT : null}\r\n            </h3>\r\n            <h4>\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"Next Lightpath start is : \" +\r\n                  this.state.LParr[this.state.lpCNT].startVertex\r\n                  : null\r\n                : null}{\" \"}\r\n              <br />{\" \"}\r\n              {this.state.showOnline\r\n                ? this.state.LParr[this.state.lpCNT] !== undefined\r\n                  ? \"end is : \" + this.state.LParr[this.state.lpCNT].endVertex\r\n                  : null\r\n                : null}\r\n            </h4>\r\n            <div\r\n              className=\"tc svgpainter2 container\"\r\n              style={{\r\n                transform: \"all 1s ease-in-out\",\r\n              }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container tc pa4\">\r\n        <h1>\r\n          Today we are going to present to you the MinADM Algorithm and\r\n          simulate it!\r\n        </h1>\r\n        <h3>Buckle Up!</h3>\r\n        <p>\r\n          We are going to present infront of you simulations on two\r\n          topologies, Ring and Line Topology.\r\n        </p>\r\n        <div>\r\n          <Link to=\"/\" className=\"generalButton\"> More Info</Link>\r\n\r\n          <Link to=\"/Ring\" className=\"generalButton\"> Ring Topology</Link>\r\n\r\n          <Link to=\"/Line\" className=\"generalButton\"> Line Topology</Link>\r\n        </div>\r\n        <h4 style={{ alignSelf: \"center\" }}>\r\n          This Project is Brought to you by Amir & Fida\r\n        </h4>\r\n        <h4>Supervised By Prof. Shmuel</h4>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport Ring from \"./Components/Ring\";\r\nimport Line from \"./Components/Line\";\r\nimport Home from \"./Components/Home\";\r\nimport Header from \"./Components/Header\";\r\n\r\nconst Router = () => (\r\n  <HashRouter basename='/'>\r\n    <div>\r\n      {/* <Header /> */}\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact={true} />\r\n        <Route path=\"/Ring\" component={Ring} />\r\n        <Route path=\"/Line\" component={Line} />\r\n        {/* <Route path=\"/add-role\" component={AddRole} /> */}\r\n      </Switch>\r\n\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nexport default Router;","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>\r\n          Today we are going to present to you the span MinADM Algorithm and\r\n          simulate it!\r\n        </h1>\r\n        <h3>Buckle Up!</h3>\r\n        <p>\r\n          We are going to present infront of you simulations on two\r\n          topologies, Ring and Line Topology.\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\n\n\nexport default class Loading extends React.Component {\n  render() {\n    return (\n        <div className=\"row justify-content-center\">\n          <div className=\"col ml-3 mt-3\">\n\n          </div>\n        </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport Router from \"./Router\";\r\nimport Loading from \"./Loading\";\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: true\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isLoading: false\r\n      });\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    return this.state.isLoading ? <Loading /> : <Router />;\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport 'tachyons';\nReactDOM.render(<div className=\"container\">\n  <App />\n</div>\n\n  , document.getElementById(\"root\"));\n"],"sourceRoot":""}